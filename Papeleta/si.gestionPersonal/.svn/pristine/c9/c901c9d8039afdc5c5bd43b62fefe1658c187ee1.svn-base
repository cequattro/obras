package pe.gob.sunafil.gestionpersonal.managedBeans;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;

import org.apache.axis.AxisFault;
import org.apache.log4j.Logger;
import org.primefaces.context.RequestContext;
import org.primefaces.event.SelectEvent;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import org.primefaces.model.UploadedFile;
import org.reniec.rel.ReniecBean;

import pe.gob.sunafil.gestionpersonal.bean.Permisos;
import pe.gob.sunafil.gestionpersonal.bean.Usuario;
import pe.gob.sunafil.gestionpersonal.mybatis.despachadores.PersonalDespatch;
import pe.gob.sunafil.gestionpersonal.persistence.model.PrtbcPersonal;
import pe.gob.sunafil.gestionpersonal.persistence.model.PrtbcTipopers;
import pe.gob.sunafil.gestionpersonal.persistence.model.RhmvcPerturno;
import pe.gob.sunafil.gestionpersonal.persistence.model.RhtbcTurno;
import pe.gob.sunafil.gestionpersonal.persistence.model.RhtbcTurnodia;
import pe.gob.sunafil.gestionpersonal.persistence.model.RhtbdPersonal;
import pe.gob.sunafil.gestionpersonal.persistence.model.SitbEscalaremun;
import pe.gob.sunafil.gestionpersonal.persistence.model.SitbPercargo;
import pe.gob.sunafil.gestionpersonal.persistence.model.SitbTdocideExample;
import pe.gob.sunafil.gestionpersonal.persistence.model.SitbTdocide;
import pe.gob.sunafil.gestionpersonal.persistence.model.TdtbcDependencia;
import pe.gob.sunafil.gestionpersonal.persistence.model.TdtbcIntendencia;
import pe.gob.sunafil.gestionpersonal.persistence.model.VstDetpersonalrrhh;
import pe.gob.sunafil.gestionpersonal.persistence.model.VstPersonalrrhh;
import pe.gob.sunafil.gestionpersonal.persistence.model.VstTurnopersonalrrhh;
import pe.gob.sunafil.gestionpersonal.utils.FacesUtils;
import pe.gob.sunafil.gestionpersonal.bean.Persona;
import pe.gob.sunafil.gestionpersonal.funciones.Funciones;
import pe.gob.sunafil.gestionpersonal.mybatis.despachadores.PersonaDespatch;
import pe.gob.sunafil.gestionpersonal.mybatis.despachadores.PersonaReniecDespatch;
import pe.gob.sunafil.gestionpersonal.reniecws.ReniecWebService;
import pe.gob.sunafil.gestionpersonal.utils.EnviarMail;

import com.sun.org.apache.xerces.internal.impl.xpath.regex.RegularExpression;

@ManagedBean(name = "personalBean")
@SessionScoped
public class PersonalBean implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5154405390560909774L;

	@ManagedProperty("#{loginBean.PGP_Usuario}")
	private Usuario PGP_Usuario;
	@ManagedProperty("#{loginBean.PGP_Permisos}")
	private Permisos PGP_Permisos;

	private static Logger logger = Logger.getLogger(MenuBean.class.getName());

	// BANDEJA PERSONAL
	private List<VstPersonalrrhh> listaPersonal;
	private VstPersonalrrhh filtro = new VstPersonalrrhh();
	private List<SitbTdocide> listaTipoDoc;
	private String txt1;
	private List<TdtbcDependencia> dependenciasAutocomplete;
	private TdtbcDependencia dependenciaSeleccionada;
	private String selectedIntendencia;
	private List <TdtbcIntendencia> listaIntendencia;		
	private boolean modoCompleto;

	// NUEVO PERSONAL
	private PrtbcPersonal nuevoPersonal = new PrtbcPersonal();
	private List<PrtbcTipopers> listaTipoPersonal;
	private String txt2;
	private List<TdtbcDependencia> dependenciasAutocomplete2;
	private TdtbcDependencia dependenciaSeleccionada2;
	private List<SitbPercargo> listaCargoPersonal;
	private List<SitbEscalaremun> listaEscala;
	private String mensajeValida;
	private String selectedIntendencia2;
	private PersonaDespatch pd;
	private Date fechaInicio=new Date();
	
	// EDITAR PERSONAL
	private PrtbcPersonal selectedPersonal = new PrtbcPersonal();
	private String txt3;
	private List<TdtbcDependencia> dependenciasAutocomplete3;
	private TdtbcDependencia dependenciaSeleccionada3;
	private String mensajeValidaEdit;
	private String selectedIntendencia3;	
	private List<VstDetpersonalrrhh> listaDetPersonal;
	private RhtbdPersonal nuevoDetPersonal;
	private RhtbdPersonal eliminarDetPersonal;
	private VstDetpersonalrrhh eliminarDetPersonalV;
	private Date dFecini=new Date();
	private RhtbdPersonal principalDetPersonal;
	private VstDetpersonalrrhh principalDetPersonalV;
	private Date fechaBaja=new Date();	
	private String txt4;
	private List<TdtbcDependencia> dependenciasAutocomplete4;
	private TdtbcDependencia dependenciaSeleccionada4;
	private String selectedIntendencia4;
	private RhtbdPersonal editarDetPersonal;
	private Date dFeciniE=new Date();
	private Date dFecfinE=new Date();
	private boolean soloVer;
	private boolean deshabilitarTipoYEscala=false;
	
	// TURNO POR PERSONAL
	private VstPersonalrrhh selectedPersonalT=new VstPersonalrrhh();
	private List<RhtbcTurno> listaTurno;
	private RhmvcPerturno nuevoPerTurno=new RhmvcPerturno();	
	private List<RhtbcTurnodia> listaTurnoDia;
	private List<VstTurnopersonalrrhh> listaTurnoPersonal;
	private String mensajeValidaTP;
	private RhmvcPerturno eliminarPerTurno;
	private VstTurnopersonalrrhh eliminarPerTurnoV;
	private RhmvcPerturno editarPerTurno;	
	private VstTurnopersonalrrhh editarPerTurnoV;
	private List<RhtbcTurnodia> listaTurnoDiaE;		
	private String mensajeValidaTPE;		
	private RhmvcPerturno zoomPerTurno;	
	private List<RhtbcTurnodia> listaTurnoDiaZ;		
	
	public boolean isDeshabilitarTipoYEscala() {
		return deshabilitarTipoYEscala;
	}

	public void setDeshabilitarTipoYEscala(boolean deshabilitarTipoYEscala) {
		this.deshabilitarTipoYEscala = deshabilitarTipoYEscala;
	}

	public VstTurnopersonalrrhh getEditarPerTurnoV() {
		return editarPerTurnoV;
	}

	public void setEditarPerTurnoV(VstTurnopersonalrrhh editarPerTurnoV) {
		this.editarPerTurnoV = editarPerTurnoV;
	}

	public boolean isSoloVer() {
		return soloVer;
	}

	public void setSoloVer(boolean soloVer) {
		this.soloVer = soloVer;
	}

	public boolean isModoCompleto() {
		return modoCompleto;
	}

	public void setModoCompleto(boolean modoCompleto) {
		this.modoCompleto = modoCompleto;
	}

	public Date getFechaBaja() {
		return fechaBaja;
	}

	public void setFechaBaja(Date fechaBaja) {
		this.fechaBaja = fechaBaja;
	}

	public RhmvcPerturno getZoomPerTurno() {
		return zoomPerTurno;
	}

	public void setZoomPerTurno(RhmvcPerturno zoomPerTurno) {
		this.zoomPerTurno = zoomPerTurno;
	}

	public List<RhtbcTurnodia> getListaTurnoDiaZ() {
		return listaTurnoDiaZ;
	}

	public void setListaTurnoDiaZ(List<RhtbcTurnodia> listaTurnoDiaZ) {
		this.listaTurnoDiaZ = listaTurnoDiaZ;
	}

	public String getMensajeValidaTPE() {
		return mensajeValidaTPE;
	}

	public void setMensajeValidaTPE(String mensajeValidaTPE) {
		this.mensajeValidaTPE = mensajeValidaTPE;
	}

	public List<RhtbcTurnodia> getListaTurnoDiaE() {
		return listaTurnoDiaE;
	}

	public void setListaTurnoDiaE(List<RhtbcTurnodia> listaTurnoDiaE) {
		this.listaTurnoDiaE = listaTurnoDiaE;
	}

	public RhmvcPerturno getEditarPerTurno() {
		return editarPerTurno;
	}

	public void setEditarPerTurno(RhmvcPerturno editarPerTurno) {
		this.editarPerTurno = editarPerTurno;
	}

	public RhmvcPerturno getEliminarPerTurno() {
		return eliminarPerTurno;
	}

	public void setEliminarPerTurno(RhmvcPerturno eliminarPerTurno) {
		this.eliminarPerTurno = eliminarPerTurno;
	}

	public VstTurnopersonalrrhh getEliminarPerTurnoV() {
		return eliminarPerTurnoV;
	}

	public void setEliminarPerTurnoV(VstTurnopersonalrrhh eliminarPerTurnoV) {
		this.eliminarPerTurnoV = eliminarPerTurnoV;
	}

	public VstDetpersonalrrhh getPrincipalDetPersonalV() {
		return principalDetPersonalV;
	}

	public void setPrincipalDetPersonalV(VstDetpersonalrrhh principalDetPersonalV) {
		this.principalDetPersonalV = principalDetPersonalV;
	}

	public RhtbdPersonal getPrincipalDetPersonal() {
		return principalDetPersonal;
	}

	public void setPrincipalDetPersonal(RhtbdPersonal principalDetPersonal) {
		this.principalDetPersonal = principalDetPersonal;
	}

	public Date getdFeciniE() {
		return dFeciniE;
	}

	public void setdFeciniE(Date dFeciniE) {
		this.dFeciniE = dFeciniE;
	}

	public Date getdFecfinE() {
		return dFecfinE;
	}

	public void setdFecfinE(Date dFecfinE) {
		this.dFecfinE = dFecfinE;
	}

	public Date getdFecini() {
		return dFecini;
	}

	public void setdFecini(Date dFecini) {
		this.dFecini = dFecini;
	}

	public String getTxt4() {
		return txt4;
	}

	public void setTxt4(String txt4) {
		this.txt4 = txt4;
	}

	public List<TdtbcDependencia> getDependenciasAutocomplete4() {
		return dependenciasAutocomplete4;
	}

	public void setDependenciasAutocomplete4(
			List<TdtbcDependencia> dependenciasAutocomplete4) {
		this.dependenciasAutocomplete4 = dependenciasAutocomplete4;
	}

	public TdtbcDependencia getDependenciaSeleccionada4() {
		return dependenciaSeleccionada4;
	}

	public void setDependenciaSeleccionada4(
			TdtbcDependencia dependenciaSeleccionada4) {
		this.dependenciaSeleccionada4 = dependenciaSeleccionada4;
	}

	public String getSelectedIntendencia4() {
		return selectedIntendencia4;
	}

	public void setSelectedIntendencia4(String selectedIntendencia4) {
		this.selectedIntendencia4 = selectedIntendencia4;
	}

	public RhtbdPersonal getEditarDetPersonal() {
		return editarDetPersonal;
	}

	public void setEditarDetPersonal(RhtbdPersonal editarDetPersonal) {
		this.editarDetPersonal = editarDetPersonal;
	}

	public VstDetpersonalrrhh getEliminarDetPersonalV() {
		return eliminarDetPersonalV;
	}

	public void setEliminarDetPersonalV(VstDetpersonalrrhh eliminarDetPersonalV) {
		this.eliminarDetPersonalV = eliminarDetPersonalV;
	}

	public RhtbdPersonal getEliminarDetPersonal() {
		return eliminarDetPersonal;
	}

	public void setEliminarDetPersonal(RhtbdPersonal eliminarDetPersonal) {
		this.eliminarDetPersonal = eliminarDetPersonal;
	}

	public RhtbdPersonal getNuevoDetPersonal() {
		return nuevoDetPersonal;
	}

	public void setNuevoDetPersonal(RhtbdPersonal nuevoDetPersonal) {
		this.nuevoDetPersonal = nuevoDetPersonal;
	}

	public List<VstDetpersonalrrhh> getListaDetPersonal() {
		return listaDetPersonal;
	}

	public void setListaDetPersonal(List<VstDetpersonalrrhh> listaDetPersonal) {
		this.listaDetPersonal = listaDetPersonal;
	}

	public Date getFechaInicio() {
		return fechaInicio;
	}

	public void setFechaInicio(Date fechaInicio) {
		this.fechaInicio = fechaInicio;
	}

	public String getMensajeValidaTP() {
		return mensajeValidaTP;
	}

	public void setMensajeValidaTP(String mensajeValidaTP) {
		this.mensajeValidaTP = mensajeValidaTP;
	}

	public List<VstTurnopersonalrrhh> getListaTurnoPersonal() {
		return listaTurnoPersonal;
	}

	public void setListaTurnoPersonal(List<VstTurnopersonalrrhh> listaTurnoPersonal) {
		this.listaTurnoPersonal = listaTurnoPersonal;
	}

	public List<RhtbcTurnodia> getListaTurnoDia() {
		return listaTurnoDia;
	}

	public void setListaTurnoDia(List<RhtbcTurnodia> listaTurnoDia) {
		this.listaTurnoDia = listaTurnoDia;
	}

	public List<RhtbcTurno> getListaTurno() {
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			listaTurno=personalDespatch.getTurnos();
		} catch (Exception e) {
			listaTurno=null;
			e.printStackTrace();
		}
		return listaTurno;
	}

	public void setListaTurno(List<RhtbcTurno> listaTurno) {
		this.listaTurno = listaTurno;
	}

	public RhmvcPerturno getNuevoPerTurno() {
		return nuevoPerTurno;
	}

	public void setNuevoPerTurno(RhmvcPerturno nuevoPerTurno) {
		this.nuevoPerTurno = nuevoPerTurno;
	}

	public VstPersonalrrhh getSelectedPersonalT() {
		return selectedPersonalT;
	}

	public void setSelectedPersonalT(VstPersonalrrhh selectedPersonalT) {
		this.selectedPersonalT = selectedPersonalT;
	}

	public String getSelectedIntendencia2() {
		return selectedIntendencia2;
	}

	public void setSelectedIntendencia2(String selectedIntendencia2) {
		this.selectedIntendencia2 = selectedIntendencia2;
	}

	public String getSelectedIntendencia3() {
		return selectedIntendencia3;
	}

	public void setSelectedIntendencia3(String selectedIntendencia3) {
		this.selectedIntendencia3 = selectedIntendencia3;
	}

	public List<TdtbcIntendencia> getListaIntendencia() {
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			listaIntendencia=personalDespatch.getIntendencia(PGP_Usuario.getN_numint());
		} catch (Exception e) {
			listaIntendencia=null;
			e.printStackTrace();
		}
		return listaIntendencia;
	}

	public void setListaIntendencia(List<TdtbcIntendencia> listaIntendencia) {
		this.listaIntendencia = listaIntendencia;
	}
	
	public String getSelectedIntendencia() {
		return selectedIntendencia;
	}

	public void setSelectedIntendencia(String selectedIntendencia) {
		this.selectedIntendencia = selectedIntendencia;
	}
	
	public PrtbcPersonal getSelectedPersonal() {
		return selectedPersonal;
	}

	public void setSelectedPersonal(PrtbcPersonal selectedPersonal) {
		this.selectedPersonal = selectedPersonal;
	}

	public String getTxt3() {
		return txt3;
	}

	public void setTxt3(String txt3) {
		this.txt3 = txt3;
	}

	public List<TdtbcDependencia> getDependenciasAutocomplete3() {
		return dependenciasAutocomplete3;
	}

	public void setDependenciasAutocomplete3(
			List<TdtbcDependencia> dependenciasAutocomplete3) {
		this.dependenciasAutocomplete3 = dependenciasAutocomplete3;
	}

	public TdtbcDependencia getDependenciaSeleccionada3() {
		return dependenciaSeleccionada3;
	}

	public void setDependenciaSeleccionada3(
			TdtbcDependencia dependenciaSeleccionada3) {
		this.dependenciaSeleccionada3 = dependenciaSeleccionada3;
	}

	public String getMensajeValidaEdit() {
		return mensajeValidaEdit;
	}

	public void setMensajeValidaEdit(String mensajeValidaEdit) {
		this.mensajeValidaEdit = mensajeValidaEdit;
	}

	public String getMensajeValida() {
		return mensajeValida;
	}

	public void setMensajeValida(String mensajeValida) {
		this.mensajeValida = mensajeValida;
	}

	public List<SitbEscalaremun> getListaEscala() {
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			listaEscala = personalDespatch.getEscalas();
		} catch (Exception e) {
			listaEscala = null;
			e.printStackTrace();
		}
		return listaEscala;
	}

	public void setListaEscala(List<SitbEscalaremun> listaEscala) {
		this.listaEscala = listaEscala;
	}

	public List<SitbPercargo> getListaCargoPersonal() {
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			listaCargoPersonal = personalDespatch.getCargos();
		} catch (Exception e) {
			listaCargoPersonal = null;
			e.printStackTrace();
		}
		return listaCargoPersonal;
	}

	public void setListaCargoPersonal(List<SitbPercargo> listaCargoPersonal) {
		this.listaCargoPersonal = listaCargoPersonal;
	}

	public String getTxt2() {
		return txt2;
	}

	public void setTxt2(String txt2) {
		this.txt2 = txt2;
	}

	public List<TdtbcDependencia> getDependenciasAutocomplete2() {
		return dependenciasAutocomplete2;
	}

	public void setDependenciasAutocomplete2(
			List<TdtbcDependencia> dependenciasAutocomplete2) {
		this.dependenciasAutocomplete2 = dependenciasAutocomplete2;
	}

	public TdtbcDependencia getDependenciaSeleccionada2() {
		return dependenciaSeleccionada2;
	}

	public void setDependenciaSeleccionada2(
			TdtbcDependencia dependenciaSeleccionada2) {
		this.dependenciaSeleccionada2 = dependenciaSeleccionada2;
	}

	public List<PrtbcTipopers> getListaTipoPersonal() {
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			listaTipoPersonal = personalDespatch.getTipoPersonal();
		} catch (Exception e) {
			listaTipoPersonal = null;
			e.printStackTrace();
		}
		return listaTipoPersonal;
	}

	public void setListaTipoPersonal(List<PrtbcTipopers> listaTipoPersonal) {
		this.listaTipoPersonal = listaTipoPersonal;
	}

	public PrtbcPersonal getNuevoPersonal() {
		return nuevoPersonal;
	}

	public void setNuevoPersonal(PrtbcPersonal nuevoPersonal) {
		this.nuevoPersonal = nuevoPersonal;
	}

	public String getTxt1() {
		return txt1;
	}

	public void setTxt1(String txt1) {
		this.txt1 = txt1;
	}

	public List<TdtbcDependencia> getDependenciasAutocomplete() {
		return dependenciasAutocomplete;
	}

	public void setDependenciasAutocomplete(
			List<TdtbcDependencia> dependenciasAutocomplete) {
		this.dependenciasAutocomplete = dependenciasAutocomplete;
	}

	public TdtbcDependencia getDependenciaSeleccionada() {
		return dependenciaSeleccionada;
	}

	public void setDependenciaSeleccionada(
			TdtbcDependencia dependenciaSeleccionada) {
		this.dependenciaSeleccionada = dependenciaSeleccionada;
	}

	public Usuario getPGP_Usuario() {
		return PGP_Usuario;
	}

	public void setPGP_Usuario(Usuario pGP_Usuario) {
		PGP_Usuario = pGP_Usuario;
	}

	public Permisos getPGP_Permisos() {
		return PGP_Permisos;
	}

	public void setPGP_Permisos(Permisos pGP_Permisos) {
		PGP_Permisos = pGP_Permisos;
	}

	public List<VstPersonalrrhh> getListaPersonal() {
		return listaPersonal;
	}

	public void setListaPersonal(List<VstPersonalrrhh> listaPersonal) {
		this.listaPersonal = listaPersonal;
	}

	public VstPersonalrrhh getFiltro() {
		return filtro;
	}

	public void setFiltro(VstPersonalrrhh filtro) {
		this.filtro = filtro;
	}

	public List<SitbTdocide> getListaTipoDoc() {
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			listaTipoDoc = personalDespatch.getTipoDocRemitente();
		} catch (Exception e) {
			listaTipoDoc = null;
			e.printStackTrace();
		}
		return listaTipoDoc;
	}

	public void setListaTipoDoc(List<SitbTdocide> listaTipoDoc) {
		this.listaTipoDoc = listaTipoDoc;
	}

	public void buscarPersonal() {
		if (txt1 != null && !"".equals(txt1)) {
		} else {
			filtro.setnNumdep(null);
		}
		if (((filtro.getvCodtipodocid() == null || "".equals(filtro.getvCodtipodocid().trim())) && (filtro.getvCodpersonal()==null || "".equals(filtro.getvCodpersonal().trim())))
				&& (selectedIntendencia == null || "".equals(selectedIntendencia.trim()))
				&& (filtro.getnNumdep() == null)
				&& ("".equals(filtro.getvDesapepat().trim())
						&& "".equals(filtro.getvDesapemat().trim()) && ""
							.equals(filtro.getvDesnombres().trim()))) {
			listaPersonal = null;
			mostrarMensajeError("Debe ingresar o seleccionar al menos un criterio de búsqueda.");
			return;
		}
		if(filtro.getvCodtipodocid()!=null && !"".equals(filtro.getvCodtipodocid().trim()))
		{
			if("03".equals(filtro.getvCodtipodocid().trim()))
			{
				if(filtro.getvCodpersonal()!=null && !"".equals(filtro.getvCodpersonal().trim()))
				{
					if(filtro.getvCodpersonal().trim().length()!=8)
					{
						mostrarMensajeError("Debe ingresar un número de DNI de 8 dígitos.");						
						return;
					}
				}
				else
				{
					mostrarMensajeError("Debe ingresar un número de DNI de 8 dígitos.");					
					return;
				}
			}
			else if("06".equals(filtro.getvCodtipodocid().trim()) || "08".equals(filtro.getvCodtipodocid().trim()))
			{
				if(filtro.getvCodpersonal()!=null && !"".equals(filtro.getvCodpersonal().trim())){}
				else
				{
					mostrarMensajeError("Debe ingresar un nro de documento.");					
					return;
				}
			}
		}
		if(filtro.getvCodpersonal()!=null && !"".equals(filtro.getvCodpersonal().trim()))
		{
			if(filtro.getvCodtipodocid()!=null && !"".equals(filtro.getvCodtipodocid().trim())){}
			else
			{
				mostrarMensajeError("Debe seleccionar un tipo de documento.");				
				return;
			}
		}
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {			
			if(selectedIntendencia != null && !"".equals(selectedIntendencia.trim()))
			{
				filtro.setnNumint(new BigDecimal(selectedIntendencia));
			}
			listaPersonal = personalDespatch.getPersonalRRHH(filtro);
		} catch (Exception e) {
			listaPersonal = null;
			e.printStackTrace();
		}
	}

	public String getFormatDate(Date date) {
		if(date!=null)
		{
			return new SimpleDateFormat("dd/MM/yyyy").format(date);
		}
		else
		{
			return "";
		}
	}

	public String verPersonal(boolean modo) {
		modoCompleto=modo;
		selectedIntendencia="";
		txt1 = "";
		dependenciaSeleccionada = null;
		listaPersonal = null;
		filtro = new VstPersonalrrhh();
		String vista = "pretty:personalPretty";
		// CODIGO
		return vista;
	}
	
	public String verPersonalTurno(boolean modo) {
		modoCompleto=modo;
		selectedIntendencia="";
		txt1 = "";
		dependenciaSeleccionada = null;
		listaPersonal = null;
		filtro = new VstPersonalrrhh();
		String vista = "pretty:personalTurnoPretty";
		// CODIGO
		return vista;
	}

	public List<String> completeText(String query) {
		PersonalDespatch personalDespatch = new PersonalDespatch();
		dependenciasAutocomplete = new ArrayList<TdtbcDependencia>();
		try {
			dependenciasAutocomplete = personalDespatch
					.getAutocompletarDependenciaEIntendencia(query,
							selectedIntendencia);
							//PGP_Usuario.getN_numint());
		} catch (Exception e) {
			e.printStackTrace();
		}

		List<String> results = new ArrayList<String>();

		for (Iterator iterator = dependenciasAutocomplete.iterator(); iterator
				.hasNext();) {
			TdtbcDependencia tdtbcDependencia = (TdtbcDependencia) iterator
					.next();
			results.add(tdtbcDependencia.getvDesdep());
		}
		return results;
	}

	public void onItemSelect(SelectEvent event) {
		for (Iterator iterator = dependenciasAutocomplete.iterator(); iterator
				.hasNext();) {
			TdtbcDependencia tdtbcDependencia = (TdtbcDependencia) iterator
					.next();
			if (event.getObject().toString()
					.equals(tdtbcDependencia.getvDesdep())) {
				dependenciaSeleccionada = tdtbcDependencia;
				filtro.setnNumdep(dependenciaSeleccionada.getnNumdep());
			}
		}
	}

	public List<String> completeText2(String query) {
		PersonalDespatch personalDespatch = new PersonalDespatch();
		dependenciasAutocomplete2 = new ArrayList<TdtbcDependencia>();
		try {
			dependenciasAutocomplete2 = personalDespatch
					.getAutocompletarDependenciaEIntendencia(query,
							selectedIntendencia2);
							//PGP_Usuario.getN_numint());
		} catch (Exception e) {
			e.printStackTrace();
		}

		List<String> results = new ArrayList<String>();

		for (Iterator iterator = dependenciasAutocomplete2.iterator(); iterator
				.hasNext();) {
			TdtbcDependencia tdtbcDependencia = (TdtbcDependencia) iterator
					.next();
			results.add(tdtbcDependencia.getvDesdep());
		}
		return results;
	}

	public void onItemSelect2(SelectEvent event) {
		for (Iterator iterator = dependenciasAutocomplete2.iterator(); iterator
				.hasNext();) {
			TdtbcDependencia tdtbcDependencia = (TdtbcDependencia) iterator
					.next();
			if (event.getObject().toString()
					.equals(tdtbcDependencia.getvDesdep())) {
				dependenciaSeleccionada2 = tdtbcDependencia;
				nuevoPersonal.setnNumdep(dependenciaSeleccionada2.getnNumdep());
			}
		}
	}

	public boolean validaFormulario() {
		if(nuevoPersonal.getvCodtipodocid()!=null && !"".equals(nuevoPersonal.getvCodtipodocid().trim())){}
		else
		{
			mensajeValida="Seleccione un tipo de documento de personal.";
			return false;
		}
		if(nuevoPersonal.getvCodpersonal()!=null && !"".equals(nuevoPersonal.getvCodpersonal().trim()))
		{
			if("03".equals(nuevoPersonal.getvCodtipodocid()) || "06".equals(nuevoPersonal.getvCodtipodocid()) || "08".equals(nuevoPersonal.getvCodtipodocid()))
			{
				if(nuevoPersonal.getvDesapepat()!=null && !"".equals(nuevoPersonal.getvDesapepat().trim()) && nuevoPersonal.getvDesapemat()!=null && !"".equals(nuevoPersonal.getvDesapemat().trim()) && nuevoPersonal.getvDesnombres()!=null && !"".equals(nuevoPersonal.getvDesnombres().trim())){}
				else
				{
					mensajeValida="Ingrese nombres y apellidos del personal.";
					return false;
				}
			}			
		}
		else
		{
			mensajeValida="Ingrese número de documento de remitente.";
			return false;
		}
		if(nuevoPersonal.getvCodtipo()!=null && !"".equals(nuevoPersonal.getvCodtipo().trim())){}
		else
		{
			mensajeValida="Seleccione un tipo de personal.";
			return false;
		}
		if(nuevoPersonal.getnNumdep()!=null){}
		else
		{
			mensajeValida="Ingrese una dependencia destino.";
			return false;
		}
		if(nuevoPersonal.getvCodcargo()!=null && !"".equals(nuevoPersonal.getvCodcargo().trim())){}
		else
		{
			mensajeValida="Seleccione un cargo de personal.";
			return false;
		}
		if(nuevoPersonal.getvCodescala()!=null && !"".equals(nuevoPersonal.getvCodescala().trim())){}
		else
		{
			mensajeValida="Seleccione una escala remunerativa.";
			return false;
		}		
		/*if(nuevoPersonal.getvCorreoe()!=null && !"".equals(nuevoPersonal.getvCorreoe().trim())){}
		else
		{
			mensajeValida="Ingrese correo electrónico de personal.";
			return false;
		}
		if(!FacesUtils.validarEmail(nuevoPersonal.getvCorreoe()))
		{
			mensajeValida="Estimado usuario, por favor ingrese correo electrónico válido.";
			return false;
		}
		if(nuevoPersonal.getnFlgactivo()!=null){}
		else
		{
			mensajeValida="Seleccione un estado.";
			return false;
		}*/
		if(nuevoPersonal.getdFecnac()!=null)
		{
			if(nuevoPersonal.getdFecnac().after(new Date()))
			{
				mensajeValida="La fecha de nacimiento no puede ser mayor a la fecha actual.";
				return false;
			}
			if(!validaFechaRegular(nuevoPersonal.getdFecnac()))
			{
				mensajeValida="Verifique la fecha de nacimiento.";
				return false;
			}
		}
		else
		{
			mensajeValida="Ingrese fecha de nacimiento.";
			return false;
		}
		if(fechaInicio!=null)
		{
			if(!validaFechaInicioSUNAFIL(fechaInicio))
			{
				mensajeValida="La fecha de inicio no puede ser anterior a la fecha de creación de SUNAFIL.";
				return false;
			}
			if(fechaInicio.after(new Date()))
			{
				mensajeValida="La fecha de inicio no puede ser mayor a la fecha actual.";
				return false;
			}
		}
		else
		{
			mensajeValida="Ingrese fecha de inicio.";
			return false;
		}
		return true;
	}

	public String guardar() {
		if (txt2 != null && !"".equals(txt2)) {
		} else {
			nuevoPersonal.setnNumdep(null);
		}
		PersonalDespatch personalDespatch = new PersonalDespatch();
		if(!validaFormulario())
		{
			mostrarMensajeError(mensajeValida);			
			return "pretty:nuevoPersonalPretty";
		}
		//pendiente validar que no este ya registrado en tabla personal
		PrtbcPersonal reviewTemp;
		try {
			PrtbcPersonal filtroTemp=new PrtbcPersonal();			
			filtroTemp.setvCodtipodocid(nuevoPersonal.getvCodtipodocid());
			filtroTemp.setvCodpersonal(nuevoPersonal.getvCodpersonal());
			reviewTemp = personalDespatch.getPersonal(filtroTemp).get(0);
		} catch (Exception e) {
			reviewTemp=null;
		}	
		if(reviewTemp!=null)
		{
			mostrarMensajeError("Ya existe una persona registrada con este número de documento, favor de verificar.");			
			return "pretty:nuevoPersonalPretty";
		}
		//end validar ya registrado
		try {
			nuevoPersonal.setvDesapepat(nuevoPersonal.getvDesapepat().toUpperCase());
			nuevoPersonal.setvDesapemat(nuevoPersonal.getvDesapemat().toUpperCase());
			nuevoPersonal.setvDesnombres(nuevoPersonal.getvDesnombres().toUpperCase());
			nuevoPersonal.setnFlgactivo(new Short("1"));
			nuevoPersonal.setvCorreoe(" ");
			personalDespatch.insertarPersonal(nuevoPersonal);
			//insertar detalle personal
			RhtbdPersonal nuevoDetallePersonal=new RhtbdPersonal();
			nuevoDetallePersonal.setvCodpersonal(nuevoPersonal.getvCodpersonal());
			nuevoDetallePersonal.setnCorper(new BigDecimal(getSiguienteCorrelativoGlobalDetalle(nuevoPersonal.getvCodpersonal())));
			nuevoDetallePersonal.setnNumdep(nuevoPersonal.getnNumdep());
			nuevoDetallePersonal.setvCodcargo(nuevoPersonal.getvCodcargo());
			nuevoDetallePersonal.setvCodescala(nuevoPersonal.getvCodescala());
			nuevoDetallePersonal.setvCodtipo(nuevoPersonal.getvCodtipo());
			nuevoDetallePersonal.setvFlgprin("S");
			nuevoDetallePersonal.setvFlgact("S");
			nuevoDetallePersonal.setdFecini(fechaInicio);
			nuevoDetallePersonal.setvCodusureg(PGP_Usuario.getV_codusu());
			nuevoDetallePersonal.setdFecreg(new Date());
			personalDespatch.insertarDetallePersonal(nuevoDetallePersonal);			
			//end insertar detalle personal			
			//asignar turno CAS por defecto
			if("7".equals(nuevoPersonal.getvCodtipo()))
			{
				RhmvcPerturno defaultPerTurno=new RhmvcPerturno();
				defaultPerTurno.setdFecinicio(new Date());
				defaultPerTurno.setnCodturno(new Short("1"));//CAS
				defaultPerTurno.setvCodpersonal(nuevoPersonal.getvCodpersonal());
				defaultPerTurno.setnCodperturno(new Short(getSiguienteCorrelativoGlobalPerTurno()));
				defaultPerTurno.setvFlgact("S");			
				try {
					personalDespatch.insertarPerTurno(defaultPerTurno);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}			
			//end asignar turno CAS por defecto
			VstPersonalrrhh entTemp=new VstPersonalrrhh();
			entTemp.setvCodtipodocid(nuevoPersonal.getvCodtipodocid());
			entTemp.setvCodpersonal(nuevoPersonal.getvCodpersonal());
			filtro=entTemp;
			buscarPersonal();
			mostrarMensajeInfo("Nuevo personal registrado.");			
			return "pretty:personalPretty";
		} catch (Exception e) {
			e.printStackTrace();
			return "pretty:nuevoPersonalPretty";
		}
	}

	public String nuevo() {
		selectedIntendencia2="";
		txt2 = "";
		dependenciaSeleccionada2 = null;
		nuevoPersonal = new PrtbcPersonal();
		fechaInicio=new Date();
		String vista = "pretty:nuevoPersonalPretty";
		// CODIGO
		return vista;
	}
	
	public List<String> completeText3(String query) {
		PersonalDespatch personalDespatch = new PersonalDespatch();
		dependenciasAutocomplete3 = new ArrayList<TdtbcDependencia>();
		try {
			dependenciasAutocomplete3 = personalDespatch
					.getAutocompletarDependenciaEIntendencia(query,
							selectedIntendencia3);
							//PGP_Usuario.getN_numint());
		} catch (Exception e) {
			e.printStackTrace();
		}

		List<String> results = new ArrayList<String>();

		for (Iterator iterator = dependenciasAutocomplete3.iterator(); iterator
				.hasNext();) {
			TdtbcDependencia tdtbcDependencia = (TdtbcDependencia) iterator
					.next();
			results.add(tdtbcDependencia.getvDesdep());
		}
		return results;
	}

	public void onItemSelect3(SelectEvent event) {
		for (Iterator iterator = dependenciasAutocomplete3.iterator(); iterator
				.hasNext();) {
			TdtbcDependencia tdtbcDependencia = (TdtbcDependencia) iterator
					.next();
			if (event.getObject().toString()
					.equals(tdtbcDependencia.getvDesdep())) {
				dependenciaSeleccionada3 = tdtbcDependencia;
				nuevoDetPersonal.setnNumdep(dependenciaSeleccionada3.getnNumdep());
			}
		}
	}
	
	public boolean validaFormularioEditar() {
		if(selectedPersonal.getvCodtipodocid()!=null && !"".equals(selectedPersonal.getvCodtipodocid().trim())){}
		else
		{
			mensajeValida="Seleccione un tipo de documento de personal.";
			return false;
		}
		if(selectedPersonal.getvCodpersonal()!=null && !"".equals(selectedPersonal.getvCodpersonal().trim()))
		{
			if("03".equals(selectedPersonal.getvCodtipodocid()) || "06".equals(selectedPersonal.getvCodtipodocid()) || "08".equals(selectedPersonal.getvCodtipodocid()))
			{
				if(selectedPersonal.getvDesapepat()!=null && !"".equals(selectedPersonal.getvDesapepat().trim()) && selectedPersonal.getvDesapemat()!=null && !"".equals(selectedPersonal.getvDesapemat().trim()) && selectedPersonal.getvDesnombres()!=null && !"".equals(selectedPersonal.getvDesnombres().trim())){}
				else
				{
					mensajeValida="Ingrese nombres y apellidos del personal.";
					return false;
				}
			}			
		}
		else
		{
			mensajeValida="Ingrese número de documento de personal.";
			return false;
		}
		/*if(selectedPersonal.getvCodtipo()!=null && !"".equals(selectedPersonal.getvCodtipo().trim())){}
		else
		{
			mensajeValida="Seleccione un tipo de personal.";
			return false;
		}
		if(selectedPersonal.getnNumdep()!=null){}
		else
		{
			mensajeValida="Ingrese una dependencia destino.";
			return false;
		}
		if(selectedPersonal.getvCodcargo()!=null && !"".equals(selectedPersonal.getvCodcargo().trim())){}
		else
		{
			mensajeValida="Seleccione un cargo de personal.";
			return false;
		}
		if(selectedPersonal.getvCodescala()!=null && !"".equals(selectedPersonal.getvCodescala().trim())){}
		else
		{
			mensajeValida="Seleccione una escala remunerativa.";
			return false;
		}		
		if(selectedPersonal.getvCorreoe()!=null && !"".equals(selectedPersonal.getvCorreoe().trim())){}
		else
		{
			mensajeValida="Ingrese correo electrónico de personal.";
			return false;
		}
		if(!FacesUtils.validarEmail(selectedPersonal.getvCorreoe()))
		{
			mensajeValida="Estimado usuario, por favor ingrese correo electrónico válido.";
			return false;
		}*/
		if(selectedPersonal.getnFlgactivo()!=null)
		{
			if(selectedPersonal.getnFlgactivo()==0)
			{
				if(fechaBaja!=null)
				{
					if(!validaFechaInicioSUNAFIL(fechaBaja))
					{
						mensajeValida="La fecha de baja no puede ser anterior a la creación de SUNAFIL.";
						return false;
					}
				}
				else
				{
					mensajeValida="Ingrese fecha de baja.";
					return false;
				}
			}
		}
		else
		{
			mensajeValida="Seleccione un estado.";
			return false;
		}
		if(selectedPersonal.getdFecnac()!=null)
		{
			if(selectedPersonal.getdFecnac().after(new Date()))
			{
				mensajeValida="La fecha de nacimiento no puede ser mayor a la fecha actual.";
				return false;
			}
			if(!validaFechaRegular(selectedPersonal.getdFecnac()))
			{
				mensajeValida="Verifique la fecha de nacimiento..";
				return false;
			}
		}
		else
		{
			mensajeValida="Ingrese fecha de nacimiento.";
			return false;
		}
		return true;
	}
	
	public void editar(boolean origen) {//String		
		if (txt3 != null && !"".equals(txt3)) {
		} else {
			selectedPersonal.setnNumdep(null);
		}
		PersonalDespatch personalDespatch = new PersonalDespatch();
		if(!validaFormularioEditar())
		{
			mostrarMensajeError(mensajeValida);			
			return;
			//return "pretty:editarPersonalPretty";
		}
		//manejo de confirm
		if(origen && selectedPersonal.getnFlgactivo()==0)
		{
			System.out.println("Entro a manejo de confirm");
			RequestContext.getCurrentInstance().execute("dialogWidgetBaja.show()");			
			return;
			//return "pretty:editarPersonalPretty";
		}
		//end manejo de confirm
		try {
			selectedPersonal.setvDesapepat(selectedPersonal.getvDesapepat().toUpperCase());
			selectedPersonal.setvDesapemat(selectedPersonal.getvDesapemat().toUpperCase());
			selectedPersonal.setvDesnombres(selectedPersonal.getvDesnombres().toUpperCase());
			personalDespatch.actualizarPersonal(selectedPersonal);
			//si estado es inactivo entonces actualizar todos los detalles a inactivo también
			if(selectedPersonal.getnFlgactivo()==0)
			{
				personalDespatch.disableDateDetallePersonal(selectedPersonal.getvCodpersonal(), fechaBaja);
				personalDespatch.disableFlgActDetallePersonal(selectedPersonal.getvCodpersonal());
				personalDespatch.disableDatePerTurno(selectedPersonal.getvCodpersonal(), fechaBaja);
			}			
			//end si estado es inactivo entonces actualizar todos los detalles a inactivo también
			VstPersonalrrhh entTemp=new VstPersonalrrhh();
			entTemp.setvCodtipodocid(selectedPersonal.getvCodtipodocid());
			entTemp.setvCodpersonal(selectedPersonal.getvCodpersonal());
			filtro=entTemp;
			buscarPersonal();
			cargarListaDetallePersonal();
			mostrarMensajeInfo("Personal actualizado.");			
			//return "pretty:personalPretty";
			return;
		} catch (Exception e) {
			e.printStackTrace();
			//return "pretty:editarPersonalPretty";
			return;
		}
	}
	
	public void cargarListaDetallePersonal()
	{
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			listaDetPersonal=personalDespatch.getVistaDetallePersonal(selectedPersonal.getvCodpersonal());
		} catch (Exception e) {
			listaDetPersonal=null;
			e.printStackTrace();
		}
	}
	
	public String selectEditar(VstPersonalrrhh item)
	{
		PersonalDespatch personalDespatch = new PersonalDespatch();
		selectedPersonal=new PrtbcPersonal();
		selectedPersonal.setvCodtipodocid(item.getvCodtipodocid());
		selectedPersonal.setvCodpersonal(item.getvCodpersonal());
		selectedPersonal.setvDesapepat(item.getvDesapepat());
		selectedPersonal.setvDesapemat(item.getvDesapemat());
		selectedPersonal.setvDesnombres(item.getvDesnombres());
		selectedPersonal.setvCodtipo(item.getvCodtipo());
		selectedPersonal.setnNumdep(item.getnNumdep());
		selectedPersonal.setvCodcargo(item.getvCodcargo());
		selectedPersonal.setvCodescala(item.getvCodescala());
		selectedPersonal.setvCorreoe(item.getvCorreoe());
		selectedPersonal.setnFlgactivo(item.getnFlgactivo());
		selectedPersonal.setdFecnac(item.getdFecnac());
		cargarListaDetallePersonal();
		//selectedPersonal=item;
		/*try {
			dependenciaSeleccionada3=personalDespatch.getDependenciaPorCodigo(item.getnNumdep());
			txt3=dependenciaSeleccionada3.getvDesdep();
			selectedIntendencia3=""+dependenciaSeleccionada3.getnNumint();
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		String vista = "pretty:editarPersonalPretty"; 
        //CODIGO
        return vista;
	}
	
	public void itemChangeIntendencia()
	{
		if(selectedIntendencia == null || "".equals(selectedIntendencia.trim()))
		{
			txt1 = "";
			dependenciaSeleccionada = null;
		}
	}
	
	public void itemChangeIntendencia2()
	{
		if(selectedIntendencia2 == null || "".equals(selectedIntendencia2.trim()))
		{
			txt2 = "";
			dependenciaSeleccionada2 = null;
		}
	}
	
	public void itemChangeIntendencia3()
	{
		if(selectedIntendencia3 == null || "".equals(selectedIntendencia3.trim()))
		{
			txt3 = "";
			dependenciaSeleccionada3 = null;
		}
	}
	
	public void getDatosReniec()
	{		
		if(nuevoPersonal.getvCodtipodocid()!=null && !"".equals(nuevoPersonal.getvCodtipodocid().trim())){}
		else
		{
			mostrarMensajeError("Seleccione un tipo de documento de personal.");			
			return;
		}		
		if(nuevoPersonal.getvCodpersonal()!=null && !"".equals(nuevoPersonal.getvCodpersonal().trim()))
		{
			if(nuevoPersonal.getvCodpersonal().trim().length()!=8)
			{
				mostrarMensajeError("El número de DNI debe tener 8 dígitos.");						
				return;
			}
		}
		else
		{
			mostrarMensajeError("Ingrese un número de DNI.");					
			return;
		}
		Persona per=new Persona();
		try {
			per=obtenerPersona(nuevoPersonal.getvCodtipodocid(),nuevoPersonal.getvCodpersonal());
		} catch (Exception e) {
			per=null;
			e.printStackTrace();
		}
		try {
			per.valuesToString();
		} catch (Exception e) {
			e.printStackTrace();
		}							
		if(per!=null && ("0000".equals(per.getV_coderror()) || per.getV_coderror()==null))
		{			
			nuevoPersonal.setvDesapepat(per.getV_apepater());
			nuevoPersonal.setvDesapemat(per.getV_apemater());
			nuevoPersonal.setvDesnombres(per.getV_nombres());
			nuevoPersonal.setdFecnac(per.getD_fecnac());													
		}
		else if("DNE".equals(per.getV_coderror()) || "NHC".equals(per.getV_coderror()))
		{
			System.out.println("No recupero nada");
			nuevoPersonal.setvDesapepat("");
			nuevoPersonal.setvDesapemat("");
			nuevoPersonal.setvDesnombres("");			
			nuevoPersonal.setdFecnac(null);
			mostrarMensajeError("No se ha encontrado una persona con ese número de DNI.");			
		}			
	}
	
	public Persona obtenerPersona(String tipoDoc, String nroDoc){
		Persona pex=new Persona();
		boolean validaExiste=true;
		try {
			logger.info("Entro a Obtener Trabajador");
			pd = new PersonaDespatch();
			PersonaReniecDespatch prd=new PersonaReniecDespatch();
			//OBTENEMOS LOS DATOS INGRESADOS DE LA PERSONA:									
			if (nroDoc.length()<8) {
				FacesUtils.showFacesMessage("No es un número de documento válido", 1);
				return null;
			} else {
				String vflgReniec="";
					//EVALUA SI ES DNI
					if (tipoDoc.equals("03")) {
						//PRIMERO REALIZA LA BUSQUEDA EN SITB_PERSONA
						Persona temp=new Persona();
						temp.setV_numdoc(nroDoc);
						temp.setV_codtdocide(tipoDoc);
						ReniecBean pbusq = prd.getTrabajador(temp.getV_numdoc());
						vflgReniec=pbusq!=null?"S":"N";
						Persona pbusqTemp = pd.getTrabajador(temp);
						//Persona pbusq = pd.getTrabajador(temp);//PENDIENTE ::: IMPLEMENTAR CON NUEVO PROCEDURE
						//vflgReniec=pbusq==null?"N":pbusq.getV_flgreniec();
						vflgReniec="N";
						if ("S".equals(vflgReniec)) {
							System.out.println("ENCONTRO TRABAJADOR EN SITB_PERSONA");
							//!!!pendiente pbusq pasar a tabla entidad de tramite externo 
							//retcc.setPersona(pbusq);
							return pbusqTemp;
						}else {
							//SI NO ENCONTRO BUSCA EN EL WEBSERVICE DE RENIEC
							//WS RENIEC
							ReniecWebService rws = new ReniecWebService(FacesUtils.getIpAddress(),PGP_Usuario.getV_codusu());							
							ReniecBean pexTemp =rws.obtenerPersonaSWReniec(temp,Funciones.ObtProp_App("mtpe.framework.sistema"));
							//Persona pex=new Persona();
							pex.setV_destdocide("DNI");
							pex.setV_codtdocide("03");
							pex.setV_numdoc(pexTemp.getV_numdoc());
							pex.setV_apepater(pexTemp.getV_appaterno());
							pex.setV_apemater(pexTemp.getV_apmaterno());
							pex.setV_nombres(pexTemp.getV_nombres());
							pex.setV_flgreniec("S");
							pex.setV_coderror(pexTemp.getV_coderror());//"0000"
							System.out.println("fechaaa :::"+pexTemp.getV_fecnac());
							SimpleDateFormat simpleDate=new SimpleDateFormat("dd/MM/yyyy");
							pex.setD_fecnac(simpleDate.parse(pexTemp.getV_fecnac()));
							//persona.valuesToString();							
							//System.out.println("pex.getV_coderror() "+pex.getV_coderror());
							if (pex!=null && "0000".equals(pex.getV_coderror())) {								
								System.out.println("ENCONTRO TRABAJADOR EN WS RENIEC");
								//!!!pendiente setear pex como personaSeleccionada
								//retcc.setPersona(pex);	
								return pex;
							} else {
								String texto="";
								validaExiste=false;
								//SI NO ENCONTRO EN RENIEC O EL WS ESTA CAIDO, PERMITE GRABAR EN SITB_PERSONA
								if(pex==null){
									texto="No se encuentra el trabajador con el número de documento ingresado, deberá registrar";
								}								
								if(pex!=null){
									if("DNE".equals(pex.getV_coderror()) || "NHC".equals(pex.getV_coderror())){
										texto="El DNI consultado no existe en RENIEC por favor verificar.";
										validaExiste=true;
									}else if("AXISFAULT".equals(pex.getV_coderror())){
										//texto="Problema de comunicación con RENIEC porfavor registrar, v_coderror :: "+pex.getV_coderror();
										texto="No se ha podido conectar con Servicio de RENIEC, por favor registre manualmente los nombres. v_coderror ::"+pex.getV_coderror()+".";
										System.out.println(texto);
									}
								}								
								/**AGREGADO ENVIO CORREO**/																							
								boolean validaEnvioCorreo=false;								
								if(pex==null){
									validaEnvioCorreo=true;
								}else{
									if(!"DNE".equals(pex.getV_coderror()) && !"DNV".equals(pex.getV_coderror())){
										validaEnvioCorreo=true;
									}
								}								
								mostrarMensajeError(texto);								
								if(validaEnvioCorreo==true){												
									EnviarMail enviarCorreo=new EnviarMail();
									String[] direcciones=new String[1];									
									direcciones[0]="wcastro@sunafil.gob.pe";
									String mensaje="";								
									String asunto="Error web Service RENIEC RETCC VIRTUAL";
									mensaje=pex==null?"EL WEB SERVICE NO ESTA FUNCIONANDO":pex.getV_coderror();
									if(direcciones.length>0 && direcciones!=null){
										try {
											enviarCorreo.generarEnvioDeCorreos(mensaje, direcciones,asunto);
										} catch (Exception e1) {					
											e1.printStackTrace();
											logger.error("Error al enviar correo =>"+e1);
										}										
									}
								}								
								/** FIN ENVIO CORREO**/
							}
						}
					}																							
			}						
		} catch (Exception e) {
			logger.error(e);			
			FacesUtils.showFacesMessage("Problema de comunicación con RENIEC porfavor registrar", 1);			
			EnviarMail enviarCorreo=new EnviarMail();
			String[] direcciones=new String[1];		
			direcciones[0]="wcastro@sunafil.gob.pe";
			String mensaje="";								
			String asunto="Error grave web Service RENIEC RETCC VIRTUAL";
			logger.error("Enviando correo de aviso de error grave en el catch.");
			mensaje=e.getMessage();
			if(direcciones.length>0 && direcciones!=null){
				try {
					enviarCorreo.generarEnvioDeCorreos(mensaje, direcciones,asunto);
				} catch (Exception e1) {					
					e1.printStackTrace();
					logger.error("Error al enviar correo en el catch =>"+e1);
				}
			}
			e.printStackTrace();			
		}		
		RequestContext context=RequestContext.getCurrentInstance();
		context.addCallbackParam("validaExiste",validaExiste );
		return pex;
	}
	
	public void cargarListaTurnoPersonal()
	{
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			listaTurnoPersonal=personalDespatch.getTurnoPersonal(selectedPersonalT.getvCodpersonal());
		} catch (Exception e) {
			listaTurnoPersonal=null;
			e.printStackTrace();
		}
	}
	
	public String selectEditarT(VstPersonalrrhh item)
	{
		selectedPersonalT=item;		
		cargarListaTurnoPersonal();
		String vista = "pretty:turnoPersonalPretty"; 
        //CODIGO
        return vista;
	}
	
	public boolean validarFormularioTurnoPersonal()
	{		
		System.out.println("nuevoPerTurno.getnCodturno() ::: "+nuevoPerTurno.getnCodturno());		
		//validar q no haya otro turno activo para esa persona
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			boolean flag=personalDespatch.getTieneTurnoActivo(selectedPersonalT.getvCodpersonal());
			if(flag)
			{
				mensajeValidaTP="La persona ya tiene un turno en estado activo.";
				return false;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		//end validar q no haya otro turno activo para esa persona
		//validar q	la fecha ingresada sea debe ser mayor o igual q la fecha menor de inicio de labores
		if(nuevoPerTurno.getdFecinicio()!=null)
		{
			if(!validaFechaInicioSUNAFIL(nuevoPerTurno.getdFecinicio()))
			{
				mensajeValidaTP="La fecha de inicio no puede ser anterior a la fecha de creación de SUNAFIL.";
				return false;
			}			
			try {
				Date minFecha=personalDespatch.getMinDateDetalle(selectedPersonalT.getvCodpersonal()).getdFecini();
				if(nuevoPerTurno.getdFecinicio().before(minFecha))
				{
					mensajeValidaTP="La fecha de Inicio de Turno debe ser mayor que la fecha de Inicio de Labores.";
					return false;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		//end validar q	la fecha ingresada sea debe ser mayor o igual q la fecha menor de inicio de labores
		//validar q los rangos de fecha no se cruzen
		if(nuevoPerTurno.getdFecinicio()!=null)
		{
			try {
				Date minFecha=personalDespatch.getMinDatePerTurno(selectedPersonalT.getvCodpersonal()).getdFecinicio();
				Date maxFecha=personalDespatch.getMaxDatePerTurno(selectedPersonalT.getvCodpersonal()).getdFecfin();
				if(minFecha!=null && maxFecha!=null)
				{
					if(nuevoPerTurno.getdFecinicio().after(minFecha) && nuevoPerTurno.getdFecinicio().before(maxFecha))
					{
						mensajeValidaTP="La fecha de Inicio ingresada se cruza con un registro de turno.";
						return false;
					}
				}
				if(minFecha!=null && maxFecha==null)
				{
					if(nuevoPerTurno.getdFecinicio().before(minFecha))
					{
						mensajeValidaTP="La fecha de Inicio ingresada no puede ser menor que la fecha de inicio de otro registro de turno.";
						return false;
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		//end validar q los rangos de fecha no se cruzen
		if(nuevoPerTurno.getnCodturno()!=null && nuevoPerTurno.getnCodturno()!=0){}
		else
		{
			mensajeValidaTP="Seleccione un turno.";
			return false;
		}
		/*if(nuevoPerTurno.getvFlgact()!=null && !"".equals(nuevoPerTurno.getvFlgact())){}
		else
		{
			mensajeValidaTP="Seleccione un estado.";
			return false;
		}*/
		if(nuevoPerTurno.getdFecinicio()!=null){}
		else
		{
			mensajeValidaTP="Ingrese fecha inicio.";
			return false;
		}
		/*if(nuevoPerTurno.getdFecfin()!=null){}
		else
		{
			mensajeValidaTP="Ingrese fecha fin.";
			return false;
		}
		if(nuevoPerTurno.getdFecinicio()!=null && nuevoPerTurno.getdFecfin()!=null)
		{
			if(nuevoPerTurno.getdFecinicio().after(nuevoPerTurno.getdFecfin()))
			{
				mensajeValidaTP="La fecha fin debe ser mayor a la fecha inicio.";
				return false;
			}
		}*/
		return true;
	}
	
	public String guardarTurnoPersonal()
	{
		if(!validarFormularioTurnoPersonal())
		{
			mostrarMensajeError(mensajeValidaTP);			
			return "pretty:turnoPersonalPretty";
		}
		//pendiente validar
		nuevoPerTurno.setvCodpersonal(selectedPersonalT.getvCodpersonal());
		nuevoPerTurno.setnCodperturno(new Short(getSiguienteCorrelativoGlobalPerTurno()));
		nuevoPerTurno.setvFlgact("S");
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			personalDespatch.insertarPerTurno(nuevoPerTurno);
		} catch (Exception e) {
			e.printStackTrace();
		}		
		cargarListaTurnoPersonal();
		limpiarTurnoPersonal();
		mostrarMensajeInfo("Se guardó el turno.");		
		String vista = "pretty:turnoPersonalPretty"; 
        //CODIGO
        return vista;
	}
	
	public void itemChangeTurno()
	{
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			listaTurnoDia=personalDespatch.getTurnoDia(nuevoPerTurno.getnCodturno());
		} catch (Exception e) {
			listaTurnoDia=null;
			e.printStackTrace();
		}		
	}
	
	public void limpiarTurnoPersonal()
	{
		nuevoPerTurno.setnCodturno(null);
		nuevoPerTurno.setvFlgact(null);
		nuevoPerTurno.setdFecinicio(null);
		nuevoPerTurno.setdFecfin(null);
	}
	
	public String getSiguienteCorrelativoGlobalPerTurno()
	{
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			RhmvcPerturno correlativo=personalDespatch.getCorrelativoGlobalPerTurno();
			if(correlativo!=null)
			{
				return ""+(correlativo.getnCodperturno()+1);
			}
			else
			{
				//devuelve correlativo en 1				
				return "1";
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}				
	}
	
	public String verPersonalAfterTurno()
	{
		VstPersonalrrhh entTemp=new VstPersonalrrhh();
		entTemp.setvCodtipodocid(selectedPersonalT.getvCodtipodocid());
		entTemp.setvCodpersonal(selectedPersonalT.getvCodpersonal());
		filtro=entTemp;
		buscarPersonal();		
		String vista = "pretty:personalPretty";
		if(!modoCompleto)
		{
			vista = "pretty:personalTurnoPretty";
		}
		// CODIGO
		return vista;
	}
	
	public String getSiguienteCorrelativoGlobalDetalle(String vCodpersonal)
	{
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			RhtbdPersonal correlativo=personalDespatch.getCorrelativoGlobalDetalle(vCodpersonal);
			if(correlativo!=null)
			{
				return ""+(Integer.parseInt(correlativo.getnCorper()+"")+1);
			}
			else
			{
				//devuelve correlativo en 1				
				return "1";
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}				
	}
	
	public void dialogDetalle(){
		//reset detalle
		nuevoDetPersonal=new RhtbdPersonal();
		selectedIntendencia3="";
		txt3 = "";
		dependenciaSeleccionada3 = null;
		dFecini=new Date();
		deshabilitarTipoYEscala=false;
		//end reset detalle
		
		//intenta recuperar el detalle activo y principal y setea el tipo de personal y escala por defecto y bloquea esos selectores
		try {
			PersonalDespatch personalDespatch = new PersonalDespatch();
			RhtbdPersonal defaultDetalle=personalDespatch.getDefaultDetalle(selectedPersonal.getvCodpersonal());
			if(defaultDetalle!=null)
			{
				nuevoDetPersonal.setvCodtipo(defaultDetalle.getvCodtipo());
				nuevoDetPersonal.setvCodescala(defaultDetalle.getvCodescala());
				deshabilitarTipoYEscala=true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		//end intenta recuperar el detalle activo y principal y setea el tipo de personal y escala por defecto y bloquea esos selectores
		
		RequestContext.getCurrentInstance().execute("dialogWidgetDetalle.show()");
	}
	
	public void agregarDetalle()
	{
		if(dependenciaSeleccionada3!=null){}
		else
		{
			mostrarMensajeError("Debe seleccionar una Dependencia.");
			return;
		}		
		if(nuevoDetPersonal.getvCodtipo()!=null && !"".equals(nuevoDetPersonal.getvCodtipo().trim())){}
		else
		{
			mostrarMensajeError("Seleccione un tipo de personal.");			
			return;
		}
		if(nuevoDetPersonal.getvCodcargo()!=null && !"".equals(nuevoDetPersonal.getvCodcargo().trim())){}
		else
		{
			mostrarMensajeError("Seleccione un cargo de personal.");			
			return;
		}
		if(nuevoDetPersonal.getvCodescala()!=null && !"".equals(nuevoDetPersonal.getvCodescala().trim())){}
		else
		{
			mostrarMensajeError("Seleccione una escala remunerativa.");			
			return;
		}
		if(dFecini!=null)
		{
			if(!validaFechaInicioSUNAFIL(dFecini))
			{
				mostrarMensajeError("La fecha de inicio no puede ser anterior a la fecha de creación de SUNAFIL.");				
				return;
			}
		}
		else
		{
			mostrarMensajeError("Ingrese fecha de inicio.");			
			return;
		}
		for (Iterator iterator = listaDetPersonal.iterator(); iterator
				.hasNext();) {
			VstDetpersonalrrhh det = (VstDetpersonalrrhh) iterator
					.next();
			String fechaIniList=new String(getFormatDate(det.getdFecini()));
			String fechaIniIns=new String(getFormatDate(dFecini));			
			if(det.getnNumdep().equals(dependenciaSeleccionada3.getnNumdep()))
			{
				if(fechaIniList.equalsIgnoreCase(fechaIniIns))
				{
					mostrarMensajeError("Dependencia ya existe en la misma fecha de inicio.");					
					return;
				}
			}
			if(!fechaIniList.equalsIgnoreCase(fechaIniIns))
			{
				if(det.getnNumdep().equals(dependenciaSeleccionada3.getnNumdep()) && "S".equals(det.getvFlgact()))
				{
					mostrarMensajeError("La Dependencia ya existe activa en la lista de detalles.");					
					return;
				}
			}
			if(det.getnNumdep().equals(dependenciaSeleccionada3.getnNumdep()))
			{
				if(det.getdFecfin()!=null)
				{
					if(dFecini.after(det.getdFecini()) && dFecini.before(det.getdFecfin()))
					{
						mostrarMensajeError("La Fecha de inicio ingresada hace conflicto con un detalle ya existente.");						
						return;
					}
				}
			}
			
		}
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {		
			//reset los otros detalles a no principal
			//personalDespatch.disableDetallePersonal(selectedPersonal.getvCodpersonal());
			//end reset los otros detalles a no principal
			nuevoDetPersonal.setvCodpersonal(selectedPersonal.getvCodpersonal());
			nuevoDetPersonal.setnCorper(new BigDecimal(getSiguienteCorrelativoGlobalDetalle(selectedPersonal.getvCodpersonal())));
			nuevoDetPersonal.setnNumdep(dependenciaSeleccionada3.getnNumdep());
			if(personalDespatch.getTieneDetalleActivo(selectedPersonal.getvCodpersonal()))
			{
				nuevoDetPersonal.setvFlgprin("N");
			}			
			else
			{
				nuevoDetPersonal.setvFlgprin("S");
				//actualizar dependencia en cabecera de personal
				selectedPersonal.setnNumdep(nuevoDetPersonal.getnNumdep());
				selectedPersonal.setdFecmod(new Date());
				personalDespatch.actualizarPersonal(selectedPersonal);
			}
			nuevoDetPersonal.setvFlgact("S");			
			nuevoDetPersonal.setvCodusureg(PGP_Usuario.getV_codusu());
			nuevoDetPersonal.setdFecini(dFecini);
			nuevoDetPersonal.setdFecreg(new Date());
			personalDespatch.insertarDetallePersonal(nuevoDetPersonal);						
		} catch (Exception e) {
			e.printStackTrace();
		}		
		cargarListaDetallePersonal();
		RequestContext.getCurrentInstance().execute("dialogWidgetDetalle.hide()");
	}
	
	public void dialogReferenciaEliminar(VstDetpersonalrrhh item){		
		eliminarDetPersonal=new RhtbdPersonal();
		eliminarDetPersonal.setvCodpersonal(item.getvCodpersonal());
		eliminarDetPersonal.setnCorper(item.getnCorper());//agregar ncorper a la vista VstDetpersonalrrhh y regenerar
		eliminarDetPersonalV=item;
		RequestContext.getCurrentInstance().execute("dialogWidget3.show()");
	}
	
	public void eliminar()
	{
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {					
			
			try {
				if(personalDespatch.tieneMarcacionMayorAFecha(eliminarDetPersonal.getvCodpersonal(), eliminarDetPersonalV.getdFecini()))
				{
					cargarListaDetallePersonal();
					mostrarMensajeError("No se pudo eliminar el detalle debido a que existen marcaciones registradas.");
					return;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}			
			//eliminar detalle	
			personalDespatch.eliminarDetallePersonal(eliminarDetPersonal);
			//post load
			cargarListaDetallePersonal();
			mostrarMensajeInfo("Detalle fue eliminado.");			
		} catch (Exception e) {
			cargarListaDetallePersonal();
			mostrarMensajeError("Hubo problemas con la eliminación.");			
		}
	}
	
	public void itemChangeIntendencia4()
	{
		if(selectedIntendencia4 == null || "".equals(selectedIntendencia4.trim()))
		{
			txt4 = "";
			dependenciaSeleccionada4 = null;
		}
	}
	
	public List<String> completeText4(String query) {
		PersonalDespatch personalDespatch = new PersonalDespatch();
		dependenciasAutocomplete4 = new ArrayList<TdtbcDependencia>();
		try {
			dependenciasAutocomplete4 = personalDespatch
					.getAutocompletarDependenciaEIntendencia(query,
							selectedIntendencia4);
							//PGP_Usuario.getN_numint());
		} catch (Exception e) {
			e.printStackTrace();
		}

		List<String> results = new ArrayList<String>();

		for (Iterator iterator = dependenciasAutocomplete4.iterator(); iterator
				.hasNext();) {
			TdtbcDependencia tdtbcDependencia = (TdtbcDependencia) iterator
					.next();
			results.add(tdtbcDependencia.getvDesdep());
		}
		return results;
	}
	
	public void onItemSelect4(SelectEvent event) {
		for (Iterator iterator = dependenciasAutocomplete4.iterator(); iterator
				.hasNext();) {
			TdtbcDependencia tdtbcDependencia = (TdtbcDependencia) iterator
					.next();
			if (event.getObject().toString()
					.equals(tdtbcDependencia.getvDesdep())) {
				dependenciaSeleccionada4 = tdtbcDependencia;
				editarDetPersonal.setnNumdep(dependenciaSeleccionada4.getnNumdep());
			}
		}
	}
	
	public void dialogDetalleE(VstDetpersonalrrhh item){		
		//cargar editar detalle
		editarDetPersonal=new RhtbdPersonal();
		editarDetPersonal.setnCorper(item.getnCorper());
		editarDetPersonal.setvCodtipo(item.getvCodtipo());
		editarDetPersonal.setvCodcargo(item.getvCodcargo());
		editarDetPersonal.setvCodescala(item.getvCodescala());
		editarDetPersonal.setdFecini(item.getdFecini());
		editarDetPersonal.setdFecfin(item.getdFecfin());
		dFeciniE=item.getdFecini();
		dFecfinE=item.getdFecfin();
		editarDetPersonal.setvFlgact(item.getvFlgact());
		editarDetPersonal.setvFlgprin(item.getvFlgprin());
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			dependenciaSeleccionada4=personalDespatch.getDependenciaPorCodigo(item.getnNumdep());
			txt4=dependenciaSeleccionada4.getvDesdep();
			selectedIntendencia4=""+dependenciaSeleccionada4.getnNumint();
		} catch (Exception e) {
			e.printStackTrace();
		}				
		//end cargar editar detalle
		soloVer=false;
		RequestContext.getCurrentInstance().execute("dialogWidgetDetalleE.show()");
	}
	
	public void dialogDetalleV(VstDetpersonalrrhh item){
		//cargar editar detalle
		editarDetPersonal=new RhtbdPersonal();
		editarDetPersonal.setnCorper(item.getnCorper());
		editarDetPersonal.setvCodtipo(item.getvCodtipo());
		editarDetPersonal.setvCodcargo(item.getvCodcargo());
		editarDetPersonal.setvCodescala(item.getvCodescala());
		editarDetPersonal.setdFecini(item.getdFecini());
		editarDetPersonal.setdFecfin(item.getdFecfin());
		dFeciniE=item.getdFecini();
		dFecfinE=item.getdFecfin();
		editarDetPersonal.setvFlgact(item.getvFlgact());
		editarDetPersonal.setvFlgprin(item.getvFlgprin());
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			dependenciaSeleccionada4=personalDespatch.getDependenciaPorCodigo(item.getnNumdep());
			txt4=dependenciaSeleccionada4.getvDesdep();
			selectedIntendencia4=""+dependenciaSeleccionada4.getnNumint();
		} catch (Exception e) {
			e.printStackTrace();
		}				
		//end cargar editar detalle
		soloVer=true;
		RequestContext.getCurrentInstance().execute("dialogWidgetDetalleE.show()");
	}
	
	public void actualizarDetalle(boolean origen)
	{
		if(dependenciaSeleccionada4!=null){}
		else
		{
			mostrarMensajeError("Debe seleccionar una Dependencia.");			
			return;
		}		
		if(editarDetPersonal.getvCodtipo()!=null && !"".equals(editarDetPersonal.getvCodtipo().trim())){}
		else
		{
			mostrarMensajeError("Seleccione un tipo de personal.");			
			return;
		}
		if(editarDetPersonal.getvCodcargo()!=null && !"".equals(editarDetPersonal.getvCodcargo().trim())){}
		else
		{
			mostrarMensajeError("Seleccione un cargo de personal.");			
			return;
		}
		if(editarDetPersonal.getvCodescala()!=null && !"".equals(editarDetPersonal.getvCodescala().trim())){}
		else
		{
			mostrarMensajeError("Seleccione una escala remunerativa.");			
			return;
		}
		if(dFeciniE!=null)
		{
			if(!validaFechaInicioSUNAFIL(dFeciniE))
			{
				mostrarMensajeError("La fecha de inicio no puede ser anterior a la fecha de creación de SUNAFIL.");				
				return;
			}
		}
		else
		{
			mostrarMensajeError("Ingrese fecha de inicio.");			
			return;
		}
		if(editarDetPersonal.getvFlgact()!=null && !"".equals(editarDetPersonal.getvFlgact().trim())){}
		else
		{
			mostrarMensajeError("Seleccione una estado.");			
			return;
		}		
		if(dFecfinE!=null)
		{
			if(!validaFechaInicioSUNAFIL(dFecfinE))
			{
				mostrarMensajeError("La fecha de fin no puede ser anterior a la fecha de creación de SUNAFIL.");				
				return;
			}
			if(dFecfinE.after(dFeciniE)){}
			else
			{
				mostrarMensajeError("La fecha de fin ingresada debe ser mayor a la fecha de inicio.");				
				return;
			}
		}
		if("N".equals(editarDetPersonal.getvFlgact()))
		{//si es inactivo validar ingreso de fecha fin
			if(dFecfinE!=null){}
			else
			{				
				mostrarMensajeError("Si selecciona estado inactivo debe ingresar una fecha de fin.");				
				return;
			}			
		}
		//manejo de confirm
		if(origen && "N".equals(editarDetPersonal.getvFlgact()))
		{
			System.out.println("Entro a manejo de confirm detalle");
			RequestContext.getCurrentInstance().execute("dialogWidgetBajaDetalle.show()");
			return;			
		}
		//end manejo de confirm
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			editarDetPersonal.setvCodpersonal(selectedPersonal.getvCodpersonal());			
			editarDetPersonal.setnNumdep(dependenciaSeleccionada4.getnNumdep());
			//editarDetPersonal.setvFlgprin("S");//pendiente hacer combo
			//editarDetPersonal.setvFlgact("S");//pendiente hacer combo			
			editarDetPersonal.setvCodusumod(PGP_Usuario.getV_codusu());
			editarDetPersonal.setdFecmod(new Date());
			if(dFeciniE!=null)
			{
				editarDetPersonal.setdFecini(dFeciniE);
			}
			if(dFecfinE!=null)
			{
				editarDetPersonal.setdFecfin(dFecfinE);
			}
			personalDespatch.actualizarDetallePersonal(editarDetPersonal);
			//pendiente actualizar cabecera personal
		} catch (Exception e) {
			e.printStackTrace();
		}		
		cargarListaDetallePersonal();
		RequestContext.getCurrentInstance().execute("dialogWidgetDetalleE.hide()");
		mostrarMensajeInfo("Detalle actualizado.");		
		System.out.println("editado");
	}
	
	public void dialogSetPrincipal(VstDetpersonalrrhh item){		
		principalDetPersonal=new RhtbdPersonal();
		principalDetPersonal.setvCodpersonal(item.getvCodpersonal());
		principalDetPersonal.setnCorper(item.getnCorper());//agregar ncorper a la vista VstDetpersonalrrhh y regenerar
		principalDetPersonal.setvFlgprin("S");
		principalDetPersonal.setnNumdep(item.getnNumdep());
		principalDetPersonal.setvCodtipo(item.getvCodtipo());
		principalDetPersonal.setvCodcargo(item.getvCodcargo());
		principalDetPersonal.setvCodescala(item.getvCodescala());
		principalDetPersonalV=item;
		RequestContext.getCurrentInstance().execute("dialogWidget4.show()");
	}
	
	public void principal()
	{
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {		
			//reset los otros detalles a no principal
			personalDespatch.disableDetallePersonal(selectedPersonal.getvCodpersonal());
			//end reset los otros detalles a no principal
			//establecer principal	
			personalDespatch.actualizarDetallePersonal(principalDetPersonal);
			//actualizar datos de cabecera
			selectedPersonal.setnNumdep(principalDetPersonal.getnNumdep());
			selectedPersonal.setvCodtipo(principalDetPersonal.getvCodtipo());
			selectedPersonal.setvCodcargo(principalDetPersonal.getvCodcargo());
			selectedPersonal.setvCodescala(principalDetPersonal.getvCodescala());			
			personalDespatch.actualizarPersonal(selectedPersonal);
			//post load
			cargarListaDetallePersonal();
			mostrarMensajeInfo("La dependencia seleccionada fue puesta como principal.");			
		} catch (Exception e) {
			cargarListaDetallePersonal();			
			mostrarMensajeError("Hubo problemas con la configuración de dependencia principal.");
		}
	}
	
	public String verPersonalReturn() {
		selectedIntendencia="";
		txt1 = "";
		dependenciaSeleccionada = null;
		listaPersonal = null;
		VstPersonalrrhh entTemp=new VstPersonalrrhh();
		entTemp.setvCodtipodocid(selectedPersonal.getvCodtipodocid());
		entTemp.setvCodpersonal(selectedPersonal.getvCodpersonal());
		filtro=entTemp;
		buscarPersonal();
		String vista = "pretty:personalPretty";
		// CODIGO
		return vista;
	}
	
	public void dialogTurnoE(VstTurnopersonalrrhh item)
	{		
		//cargar editar per turno
		editarPerTurnoV=item;
		editarPerTurno=new RhmvcPerturno();
		editarPerTurno.setnCodperturno(item.getnCodperturno());
		editarPerTurno.setnCodturno(item.getnCodturno());
		editarPerTurno.setdFecinicio(item.getdFecinicio());
		editarPerTurno.setdFecfin(item.getdFecfin());		
		editarPerTurno.setvCodpersonal(item.getvCodpersonal());
		editarPerTurno.setvFlgact(item.getvFlgact());
		itemChangeTurnoE();
		RequestContext.getCurrentInstance().execute("dialogWidgetDetalleE.show()");
	}
	
	public void itemChangeTurnoE()
	{
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			listaTurnoDiaE=personalDespatch.getTurnoDia(editarPerTurno.getnCodturno());
		} catch (Exception e) {
			listaTurnoDiaE=null;
			e.printStackTrace();
		}		
	}
	
	public boolean validarFormularioTurnoPersonalE()
	{				
		if(editarPerTurno.getnCodturno()!=null && editarPerTurno.getnCodturno()!=0){}
		else
		{
			mensajeValidaTPE="Seleccione un turno.";
			return false;
		}
		if(editarPerTurno.getvFlgact()!=null && !"".equals(editarPerTurno.getvFlgact()))
		{
			if("N".equals(editarPerTurno.getvFlgact()))
			{
				if(editarPerTurno.getdFecfin()!=null)
				{
					if(!validaFechaInicioSUNAFIL(editarPerTurno.getdFecfin()))
					{
						mensajeValidaTPE="La fecha de fin no puede ser anterior a la fecha de creación de SUNAFIL.";
						return false;
					}
				}
				else
				{
					mensajeValidaTPE="Ingrese fecha fin.";
					return false;
				}
				if(editarPerTurno.getdFecinicio()!=null && editarPerTurno.getdFecfin()!=null)
				{
					if(editarPerTurno.getdFecinicio().after(editarPerTurno.getdFecfin()))
					{
						mensajeValidaTPE="La fecha fin debe ser mayor a la fecha inicio.";
						return false;
					}
				}
			}
			else if("S".equals(editarPerTurno.getvFlgact()))
			{
				//validar q no haya otro turno activo para esa persona
				PersonalDespatch personalDespatch = new PersonalDespatch();
				try {
					boolean flag=personalDespatch.getTieneOtroTurnoActivo(selectedPersonalT.getvCodpersonal(),editarPerTurno.getnCodperturno());
					if(flag)
					{
						mensajeValidaTPE="La persona ya tiene un turno en estado activo.";
						return false;
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				//end validar q no haya otro turno activo para esa persona
			}	
		}
		else
		{
			mensajeValidaTPE="Seleccione un estado.";
			return false;
		}
		if(editarPerTurno.getdFecinicio()!=null)
		{
			if(!validaFechaInicioSUNAFIL(editarPerTurno.getdFecinicio()))
			{
				mensajeValidaTPE="La fecha de inicio no puede ser anterior a la fecha de creación de SUNAFIL.";
				return false;
			}
		}
		else
		{
			mensajeValidaTPE="Ingrese fecha inicio.";
			return false;
		}		
		return true;
	}
	
	public void actualizarPerTurno(boolean origen)
	{
		if(!validarFormularioTurnoPersonalE())
		{
			mostrarMensajeError(mensajeValidaTPE);			
			return;
		}
		//manejo de confirm
		if(origen && "N".equals(editarPerTurno.getvFlgact()))
		{
			System.out.println("Entro a manejo de confirm detalle per turno");
			RequestContext.getCurrentInstance().execute("dialogWidgetBaja.show()");
			return;			
		}
		//end manejo de confirm
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {					
			personalDespatch.actualizarPerTurno(editarPerTurno);
			//pendiente actualizar cabecera personal
		} catch (Exception e) {
			e.printStackTrace();
		}		
		cargarListaTurnoPersonal();
		RequestContext.getCurrentInstance().execute("dialogWidgetDetalleE.hide()");
		mostrarMensajeInfo("Turno actualizado.");
	}
	
	public void dialogTurnoEliminar(VstTurnopersonalrrhh item)
	{
		eliminarPerTurno=new RhmvcPerturno();
		eliminarPerTurno.setnCodperturno(item.getnCodperturno());
		eliminarPerTurnoV=item;
		RequestContext.getCurrentInstance().execute("dialogWidget3.show()");
	}
	
	public void eliminarPerTurno()
	{
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {					
			//eliminar per turno	
			personalDespatch.eliminarPerTurno(eliminarPerTurno);
			//post load
			cargarListaTurnoPersonal();
			mostrarMensajeInfo("Detalle de turno fue eliminado.");			
		} catch (Exception e) {
			cargarListaTurnoPersonal();
			mostrarMensajeError("Hubo problemas con la eliminación.");			
		}
	}
	
	public void dialogTurnoVer(VstTurnopersonalrrhh item)
	{
		//cargar ver per turno
		zoomPerTurno=new RhmvcPerturno();
		zoomPerTurno.setnCodperturno(item.getnCodperturno());
		zoomPerTurno.setnCodturno(item.getnCodturno());
		zoomPerTurno.setdFecinicio(item.getdFecinicio());
		zoomPerTurno.setdFecfin(item.getdFecfin());		
		zoomPerTurno.setvCodpersonal(item.getvCodpersonal());
		zoomPerTurno.setvFlgact(item.getvFlgact());
		itemChangeTurnoZ();
		RequestContext.getCurrentInstance().execute("dialogWidgetDetalleV.show()");
	}
	
	public void itemChangeTurnoZ()
	{
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			listaTurnoDiaZ=personalDespatch.getTurnoDia(zoomPerTurno.getnCodturno());
		} catch (Exception e) {
			listaTurnoDiaZ=null;
			e.printStackTrace();
		}		
	}
	
	public boolean validaFechaInicioSUNAFIL(Date value)
	{
		try {
			SimpleDateFormat simpleDate=new SimpleDateFormat("dd/MM/yyyy");
			Date fechaSUNAFIL = simpleDate.parse("31/12/2013");
			return value.after(fechaSUNAFIL);
		} catch (Exception e) {
			return false;
		}		
	}
	
	public boolean validaFechaRegular(Date value)
	{
		try {
			SimpleDateFormat simpleDate=new SimpleDateFormat("dd/MM/yyyy");
			Date fechaRegular = simpleDate.parse("01/01/1916");
			return value.after(fechaRegular);
		} catch (Exception e) {
			return false;
		}		
	}
	
	public void mostrarMensajeInfo(String msg)
	{
		FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, msg, msg));
	}
	
	public void mostrarMensajeError(String msg)
	{
		FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, msg, msg));
	}

}
