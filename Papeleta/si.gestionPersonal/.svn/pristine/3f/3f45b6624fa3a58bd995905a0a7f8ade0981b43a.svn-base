package pe.gob.sunafil.gestionpersonal.mybatis.implementacion;

import java.util.Date;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;

import pe.gob.sunafil.gestionpersonal.mybatis.comun.MyBatisConnectionFactory;
import pe.gob.sunafil.gestionpersonal.mybatis.interfase.INTPersonalMarcacion;
import pe.gob.sunafil.gestionpersonal.persistence.client.RhtbcTurnoMapper;
import pe.gob.sunafil.gestionpersonal.persistence.client.TdtbcDependenciaMapper;
import pe.gob.sunafil.gestionpersonal.persistence.client.VstMarcacionrrhhMapper;
import pe.gob.sunafil.gestionpersonal.persistence.model.RhtbcTurno;
import pe.gob.sunafil.gestionpersonal.persistence.model.RhtbcTurnoExample;
import pe.gob.sunafil.gestionpersonal.persistence.model.TdtbcDependencia;
import pe.gob.sunafil.gestionpersonal.persistence.model.TdtbcDependenciaExample;
import pe.gob.sunafil.gestionpersonal.persistence.model.VstMarcacionrrhh;
import pe.gob.sunafil.gestionpersonal.persistence.model.VstMarcacionrrhhExample;
import pe.gob.sunafil.gestionpersonal.persistence.model.VstPersonalrrhh;

public class IMPPersonalMarcacion implements INTPersonalMarcacion{
	private SqlSessionFactory sqlSessionFactory;
	
	public IMPPersonalMarcacion(){
		  sqlSessionFactory=MyBatisConnectionFactory.getSqlSessionFactory();		  		  
	  }
	
	public List <VstMarcacionrrhh> getMarcaciones(VstPersonalrrhh filtro, Date fMarcacionI, Date fMarcacionF) throws Exception
	{
		SqlSession sqlSession = sqlSessionFactory.openSession();		
		VstMarcacionrrhhExample example = new VstMarcacionrrhhExample();
		pe.gob.sunafil.gestionpersonal.persistence.model.VstMarcacionrrhhExample.Criteria dinamicCriteria=example.createCriteria();
		dinamicCriteria.andVCodpersonalIsNotNull();
		if(filtro.getvCodtipodocid()!=null && !"".equals(filtro.getvCodtipodocid().trim()))
		{
			dinamicCriteria.andVCodtipodocidEqualTo(filtro.getvCodtipodocid());
		}
		if(filtro.getvCodpersonal()!=null && !"".equals(filtro.getvCodpersonal().trim()))
		{
			dinamicCriteria.andVCodpersonalEqualTo(filtro.getvCodpersonal());
		}
		if(filtro.getnNumdep()!=null)
		{
			dinamicCriteria.andNNumdepEqualTo(filtro.getnNumdep());
		}		
		if(filtro.getvCodtipo()!=null && !"".equals(filtro.getvCodtipo().trim()))
		{
			dinamicCriteria.andVCodtipoEqualTo(filtro.getvCodtipo());
		}
		if(fMarcacionI!=null && fMarcacionF!=null)
		{
			dinamicCriteria.andDFechaBetween(fMarcacionI, fMarcacionF);
		}
		example.or(dinamicCriteria);
		try {
			VstMarcacionrrhhMapper mapper = sqlSession.getMapper (VstMarcacionrrhhMapper. class);
			List <VstMarcacionrrhh> allRecords = mapper.selectByExample(example);		
			return allRecords;
		} catch (Exception e) {
        	System.out.println("Error getMarcaciones "+e.getMessage());   
        	return null;
        } finally {
        	sqlSession.close ();
		}
	}
	
	public boolean esJefeDeDependenciaLogueada(String dni, Short dependencia) throws Exception
	{
		SqlSession sqlSession = sqlSessionFactory.openSession();		
		TdtbcDependenciaExample example = new TdtbcDependenciaExample();
		example.createCriteria().andVCodjefeEqualTo(dni).andNNumdepEqualTo(dependencia);
		try {
			TdtbcDependenciaMapper mapper = sqlSession.getMapper (TdtbcDependenciaMapper. class);
			List <TdtbcDependencia> allRecords = mapper.selectByExample(example);		
			return !allRecords.isEmpty();
		} catch (Exception e) {
        	System.out.println("Error esJefeDeDependenciaLogueada "+e.getMessage());   
        	return false;
        } finally {
        	sqlSession.close ();
		}
	}
}
