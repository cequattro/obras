package pe.gob.sunafil.gestionpersonal.managedBeans;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;

import org.apache.log4j.Logger;
import org.primefaces.context.RequestContext;

import pe.gob.sunafil.gestionpersonal.bean.Usuario;
import pe.gob.sunafil.gestionpersonal.mybatis.despachadores.MarcacionDespatch;
import pe.gob.sunafil.gestionpersonal.mybatis.despachadores.PersonalDespatch;
import pe.gob.sunafil.gestionpersonal.mybatis.despachadores.PersonalMarcacionDespatch;
import pe.gob.sunafil.gestionpersonal.persistence.model.SitbTdocide;
import pe.gob.sunafil.gestionpersonal.persistence.model.VstMarcacionrrhh;
import pe.gob.sunafil.gestionpersonal.persistence.model.VstPersonalrrhh;

@ManagedBean(name="personalMarcacionBean")
@SessionScoped
public class PersonalMarcacionBean {

	private static final long serialVersionUID = 2L;

	private static Logger logger = Logger.getLogger(PersonalMarcacionBean.class.getName());
	
	@ManagedProperty("#{loginBean.PGP_Usuario}")
	private Usuario  PGP_Usuario;
	private List<SitbTdocide> listaTipoDoc;
	private Date fMarcacionI=new Date();
	private Date fMarcacionF=new Date();
	private String justificacionVerTipo;
	private String justificacionVerMotivo;
	private VstPersonalrrhh filtro = new VstPersonalrrhh();
	private List<VstMarcacionrrhh>listaMarcaciones;
	PersonalMarcacionDespatch personalMarcacionDespatch;
	
	public List<SitbTdocide> getListaTipoDoc() {
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			listaTipoDoc = personalDespatch.getTipoDocRemitente();
		} catch (Exception e) {
			listaTipoDoc = null;
			e.printStackTrace();
		}
		return listaTipoDoc;
	}
	
	public Date getfMarcacionI() {
		return fMarcacionI;
	}

	public void setfMarcacionI(Date fMarcacionI) {
		this.fMarcacionI = fMarcacionI;
	}

	public Date getfMarcacionF() {
		return fMarcacionF;
	}

	public void setfMarcacionF(Date fMarcacionF) {
		this.fMarcacionF = fMarcacionF;
	}

	public Usuario getPGP_Usuario() {
		return PGP_Usuario;
	}

	public void setPGP_Usuario(Usuario pGP_Usuario) {
		PGP_Usuario = pGP_Usuario;
	}

	public String getJustificacionVerTipo() {
		return justificacionVerTipo;
	}

	public void setJustificacionVerTipo(String justificacionVerTipo) {
		this.justificacionVerTipo = justificacionVerTipo;
	}

	public String getJustificacionVerMotivo() {
		return justificacionVerMotivo;
	}

	public void setJustificacionVerMotivo(String justificacionVerMotivo) {
		this.justificacionVerMotivo = justificacionVerMotivo;
	}

	public VstPersonalrrhh getFiltro() {
		return filtro;
	}

	public void setFiltro(VstPersonalrrhh filtro) {
		this.filtro = filtro;
	}

	public List<VstMarcacionrrhh> getListaMarcaciones() {
		return listaMarcaciones;
	}

	public void setListaMarcaciones(List<VstMarcacionrrhh> listaMarcaciones) {
		this.listaMarcaciones = listaMarcaciones;
	}

	public void setListaTipoDoc(List<SitbTdocide> listaTipoDoc) {
		this.listaTipoDoc = listaTipoDoc;
	}
	
	public String verMarcacion(){
		 limpiar();
		 String vista="pretty:miPersonalMarcacionesPretty";
	        //CODIGO
	        return  vista;
	}
	
	public void limpiar(){
		fMarcacionI=new Date();
		fMarcacionF=new Date();
		listaMarcaciones=null;
		filtro=new VstPersonalrrhh();  
		//mostrarMensajeInfo("ACABA DE LIMPIAR");
	} 
	
	public void selectVerJustificacion(VstMarcacionrrhh item)
    {    	
    	justificacionVerMotivo=item.getvMotjus();
    	justificacionVerTipo=item.getvDestipjus();
    	RequestContext.getCurrentInstance().execute("dialogWidgetDetalleJustificacion.show()");
    }
	
	private boolean validaBuscarMarcacion()
    {
    	if (((filtro.getvCodtipodocid() == null || "".equals(filtro.getvCodtipodocid().trim())) && (filtro.getvCodpersonal()==null || "".equals(filtro.getvCodpersonal().trim())))
				&& (filtro.getnNumdep() == null)
				&& (fMarcacionI == null || fMarcacionF == null)
				&& (filtro.getvCodtipo()==null)) {
    		listaMarcaciones = null;
			mostrarMensajeError("Debe ingresar o seleccionar al menos un criterio de búsqueda.");
			return false;
		}
    	if(fMarcacionI != null){}
    	else
    	{
    		mostrarMensajeError("Debe ingresar fecha de inicio.");
    		return false;
    	}
    	if(fMarcacionF != null){}
    	else
    	{
    		mostrarMensajeError("Debe ingresar fecha de fin.");
    		return false;
    	}
    	if(fMarcacionI!=null && fMarcacionF!=null)
    	{
    		if(fMarcacionI.after(fMarcacionF))
    		{
    			mostrarMensajeError("La fecha de inicio debe ser menor o igual que la fecha de fin.");
        		return false;
    		}
    	}
    	if(fMarcacionI.after(new Date()))
    	{
    		mostrarMensajeError("No puede ingresar Fechas Futuras.");
    		return false;
    	}
    	if(fMarcacionF.after(new Date()))
    	{
    		mostrarMensajeError("No puede ingresar Fechas Futuras.");
    		return false;
    	}
    	if(filtro.getvCodtipodocid()!=null && !"".equals(filtro.getvCodtipodocid().trim()))
		{
			if("03".equals(filtro.getvCodtipodocid().trim()))
			{
				if(filtro.getvCodpersonal()!=null && !"".equals(filtro.getvCodpersonal().trim()))
				{
					if(filtro.getvCodpersonal().trim().length()!=8)
					{
						mostrarMensajeError("Debe ingresar un número de DNI de 8 dígitos.");						
						return false;
					}
				}
				else
				{
					mostrarMensajeError("Debe ingresar un número de DNI de 8 dígitos.");					
					return false;
				}
			}
			else if("06".equals(filtro.getvCodtipodocid().trim()) || "08".equals(filtro.getvCodtipodocid().trim()))
			{
				if(filtro.getvCodpersonal()!=null && !"".equals(filtro.getvCodpersonal().trim())){}
				else
				{
					mostrarMensajeError("Debe ingresar un nro de documento.");					
					return false;
				}
			}
		}
    	if(filtro.getvCodpersonal()!=null && !"".equals(filtro.getvCodpersonal().trim()))
		{
			if(filtro.getvCodtipodocid()!=null && !"".equals(filtro.getvCodtipodocid().trim())){}
			else
			{
				mostrarMensajeError("Debe seleccionar un tipo de documento.");				
				return false;
			}
		}
    	return true;
    }
	
	public void buscarMarcacion()
    {
		Short dependencia=new Short(PGP_Usuario.getN_numdep());
		personalMarcacionDespatch= new PersonalMarcacionDespatch();
		//Valida si es Jefe
		try {
			if(!personalMarcacionDespatch.esJefeDeDependenciaLogueada(PGP_Usuario.getV_codpersonal(), dependencia))
			{
				mostrarMensajeError("Usuario No tiene los permisos para usar este modulo");
				return ;
			}
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		filtro.setnNumdep(dependencia);
    	if(!validaBuscarMarcacion()){}
    	else
    	{
    		PersonalMarcacionDespatch personalMarcacionDespatch = new PersonalMarcacionDespatch();
    		try {		
    			listaMarcaciones = personalMarcacionDespatch.getMarcaciones(filtro, fMarcacionI, fMarcacionF);
    		} catch (Exception e) {
    			listaMarcaciones = null;
    			e.printStackTrace();
    		}
    	}
    }
	
	public String completarDosDigitos(Short base)
    {
    	return completarCon(""+base,2,"0",0);
    }
    
    public String completarCon(String base, int longitud,String charCompletar, int lado)
	{
		String result="";
		if(base.length()<longitud)
		{
			int n=longitud-base.length();
			String ceros="";
			for (int i = 0; i < n; i++) {
				ceros+=charCompletar;
			}
			if(lado==0)//izq
			{
				result = ceros+base;
			}
			else if(lado==1)//der
			{
				result = base+ceros;
			}
		}
		else if(base.length()>longitud)
		{
			result = base.substring(0, longitud);
		}
		else if(base.length()==longitud)
		{
			result=base;
		}
		return result;
	}
	public void mostrarMensajeInfo(String msg)
	{		
		FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, msg, msg));
	}
	
	public void mostrarMensajeError(String msg)
	{
		FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, msg, msg));
	}

	
	
}
