package pe.gob.sunafil.gestionpersonal.mybatis.implementacion;

import java.math.BigDecimal;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;

import pe.gob.sunafil.gestionpersonal.mybatis.comun.MyBatisConnectionFactory;
import pe.gob.sunafil.gestionpersonal.mybatis.interfase.INTMarcacion;
import pe.gob.sunafil.gestionpersonal.persistence.client.PrtbcPersonalMapper;
import pe.gob.sunafil.gestionpersonal.persistence.client.RhmvcMarcacionMapper;
import pe.gob.sunafil.gestionpersonal.persistence.client.TdtbcDependenciaMapper;
import pe.gob.sunafil.gestionpersonal.persistence.model.PrtbcPersonal;
import pe.gob.sunafil.gestionpersonal.persistence.model.PrtbcPersonalExample;
import pe.gob.sunafil.gestionpersonal.persistence.model.RhmvcMarcacion;
import pe.gob.sunafil.gestionpersonal.persistence.model.RhmvcMarcacionExample;
import pe.gob.sunafil.gestionpersonal.persistence.model.SitbTdocide;
import pe.gob.sunafil.gestionpersonal.persistence.model.TdtbcDependencia;
import pe.gob.sunafil.gestionpersonal.persistence.model.TdtbcDependenciaExample;

public class IMPMarcacion implements INTMarcacion {
	
	private SqlSessionFactory sqlSessionFactory;
	
	public IMPMarcacion(){
		  sqlSessionFactory=MyBatisConnectionFactory.getSqlSessionFactory();		  		  
	  }
		
	public int insertarMarcacion(RhmvcMarcacion entidad) throws Exception
	{
		SqlSession sqlSession = sqlSessionFactory.openSession();
		RhmvcMarcacionMapper mapper = sqlSession.getMapper(RhmvcMarcacionMapper.class);		
		try {
			mapper.insertSelective(entidad);
			sqlSession.commit();
			return 1;
		} catch (Exception e) {			
			System.out.println("Error insertarMarcacion "+e.getMessage());   
        	return 0;
		} finally{
			sqlSession.close();			
		}
	}		
	
	public RhmvcMarcacion getCorrelativoGlobalMarcacion() throws Exception
	{
		SqlSession sqlSession = sqlSessionFactory.openSession();		
		RhmvcMarcacionExample example = new RhmvcMarcacionExample();
		example.createCriteria().andCorrelativoActual();
		try {
			RhmvcMarcacionMapper mapper = sqlSession.getMapper (RhmvcMarcacionMapper. class);
			List <RhmvcMarcacion> allRecords = mapper.selectByExample(example);		
			return allRecords.get(0);
		} catch (Exception e) {
        	System.out.println("Error getCorrelativoGlobalMarcacion "+e.getMessage());   
        	return null;
        } finally {
        	sqlSession.close ();
		}
	}
	
	public boolean getExistePersonal(String vCodpersonal) throws Exception
	{
		SqlSession sqlSession = sqlSessionFactory.openSession();		
		PrtbcPersonalExample example = new PrtbcPersonalExample();
		example.createCriteria().andVCodpersonalEqualTo(vCodpersonal).andNFlgactivoEqualTo(new Short("1"));
		try {
			PrtbcPersonalMapper mapper = sqlSession.getMapper (PrtbcPersonalMapper. class);
			List <PrtbcPersonal> allRecords = mapper.selectByExample(example);		
			return !allRecords.isEmpty();
		} catch (Exception e) {
        	System.out.println("Error getExistePersonal "+e.getMessage());   
        	return false;
        } finally {
        	sqlSession.close ();
		}
	}
	
	public boolean eliminarMarcacionesRepetidas(Date dFechaI, Date dFechaF) throws Exception
	{
		SqlSession sqlSession = sqlSessionFactory.openSession();		
		RhmvcMarcacionExample example = new RhmvcMarcacionExample();
		example.createCriteria().andDFechaGreaterThanOrEqualTo(dFechaI).andDFechaLessThanOrEqualTo(dFechaF);	
		example.setOrderByClause("v_codpersonal, d_fecha, n_hora, n_minuto, n_segundo");
		try {
			RhmvcMarcacionMapper mapper = sqlSession.getMapper (RhmvcMarcacionMapper. class);
			List <RhmvcMarcacion> allRecords = mapper.selectByExample(example);			
			for (int i=0;i<allRecords.size();i++)
			{				
				if(i!=0)
				{
					RhmvcMarcacion currentItem=allRecords.get(i);
					RhmvcMarcacion previousItem=allRecords.get(i-1);
					if(currentItem.getvCodpersonal().equals(previousItem.getvCodpersonal()) &&
					   currentItem.getdFecha().equals(previousItem.getdFecha()) &&
					   currentItem.getnHora().equals(previousItem.getnHora()) &&
					   currentItem.getnMinuto().equals(previousItem.getnMinuto())							
							)
					{						
						mapper.deleteByPrimaryKey(currentItem.getnCodmarcacion());
						sqlSession.commit();
					}
				}
			}
			return true;
		} catch (Exception e) {
        	System.out.println("Error eliminarMarcacionesRepetidas "+e.getMessage());
        	return false;
        } finally {
        	sqlSession.close ();
		}
	}
	
}
