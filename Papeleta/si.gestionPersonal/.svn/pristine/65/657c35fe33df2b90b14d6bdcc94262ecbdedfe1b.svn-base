package pe.gob.sunafil.gestionpersonal.managedBeans;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.primefaces.context.RequestContext;
import org.springframework.util.StringUtils;

import pe.gob.sunafil.gestionpersonal.bean.Usuario;
import pe.gob.sunafil.gestionpersonal.funciones.Funciones;
import pe.gob.sunafil.gestionpersonal.mybatis.despachadores.MarcacionDespatch;
import pe.gob.sunafil.gestionpersonal.mybatis.despachadores.PersonalDespatch;
import pe.gob.sunafil.gestionpersonal.persistence.model.PrtbcPersonal;
import pe.gob.sunafil.gestionpersonal.persistence.model.RhmvcMarcacion;
import pe.gob.sunafil.gestionpersonal.persistence.model.RhtbcTipojus;
import pe.gob.sunafil.gestionpersonal.persistence.model.RhtbcTipomarcacion;
import pe.gob.sunafil.gestionpersonal.persistence.model.SitbTdocide;
import pe.gob.sunafil.gestionpersonal.persistence.model.TdtbcDependencia;
import pe.gob.sunafil.gestionpersonal.persistence.model.TdtbcIntendencia;
import pe.gob.sunafil.gestionpersonal.persistence.model.VstMarcacionrrhh;
import pe.gob.sunafil.gestionpersonal.persistence.model.VstPersonalrrhh;
import pe.gob.sunafil.gestionpersonal.utils.FacesUtils;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import org.primefaces.event.FileUploadEvent;
import org.primefaces.event.SelectEvent;
import org.primefaces.event.TabChangeEvent;
import org.primefaces.model.StreamedContent;
import org.primefaces.model.UploadedFile;

import pe.gob.sunafil.gestionpersonal.txt.*;

import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

@ManagedBean(name="marcacionBean")
@SessionScoped
public class MarcacionBean  implements Serializable {
	
	private static final long serialVersionUID = -2255841932878027343L;

	private static Logger logger = Logger.getLogger(MarcacionBean.class.getName());
	
	private PersonalDespatch personalDespatch= new PersonalDespatch();
	
	//De DAT a EXCEL
	private UploadedFile fileTxt;
	private Boolean uploadedTxt;
	private Boolean convertedTxt;
	private StreamedContent fileDownloadTxt;
	private Date fCargaI=new Date();
	private Date fCargaF=new Date();
	
	//personal marcacion
	private VstPersonalrrhh filtro = new VstPersonalrrhh();
	private List<SitbTdocide> listaTipoDoc;
	private String txt1;
	private ArrayList<PrtbcPersonal>  personalAutocomplete;
	private List<TdtbcDependencia> dependenciasAutocomplete;
	private TdtbcDependencia dependenciaSeleccionada;
	private PrtbcPersonal personalSeleccionado;
	private String selectedIntendencia;
	private List <TdtbcIntendencia> listaIntendencia;	
	private Date fMarcacionI=new Date();
	private Date fMarcacionF=new Date();
	private Date fecha= new Date();
	private List<VstMarcacionrrhh> listaMarcaciones;		
	private List<RhtbcTipomarcacion> listaTipoMarcacion;
	private List<RhtbcTipojus> listaTipoJustificacion;
	private RhmvcMarcacion justificacion = new RhmvcMarcacion();
	private RhmvcMarcacion justificacionEliminar = new RhmvcMarcacion();
	private VstMarcacionrrhh justificacionVer = new VstMarcacionrrhh();
	private String personal;
	
	public ArrayList<PrtbcPersonal> getPersonalAutocomplete() {
		return personalAutocomplete;
	}

	public void setPersonalAutocomplete(
			ArrayList<PrtbcPersonal> personalAutocomplete) {
		this.personalAutocomplete = personalAutocomplete;
	}

	public VstMarcacionrrhh getJustificacionVer() {
		return justificacionVer;
	}

	public void setJustificacionVer(VstMarcacionrrhh justificacionVer) {
		this.justificacionVer = justificacionVer;
	}

	public RhmvcMarcacion getJustificacionEliminar() {
		return justificacionEliminar;
	}

	public void setJustificacionEliminar(RhmvcMarcacion justificacionEliminar) {
		this.justificacionEliminar = justificacionEliminar;
	}

	public List<RhtbcTipojus> getListaTipoJustificacion() {
		MarcacionDespatch marcacionDespatch = new MarcacionDespatch();
		try {
			listaTipoJustificacion = marcacionDespatch.getTipoJustificacion();
		} catch (Exception e) {
			listaTipoJustificacion = null;
			e.printStackTrace();
		}
		return listaTipoJustificacion;
	}

	public void setListaTipoJustificacion(List<RhtbcTipojus> listaTipoJustificacion) {
		this.listaTipoJustificacion = listaTipoJustificacion;
	}

	public RhmvcMarcacion getJustificacion() {
		return justificacion;
	}

	public void setJustificacion(RhmvcMarcacion justificacion) {
		this.justificacion = justificacion;
	}

	public List<RhtbcTipomarcacion> getListaTipoMarcacion() {
		MarcacionDespatch marcacionDespatch = new MarcacionDespatch();
		try {
			listaTipoMarcacion = marcacionDespatch.getTipoMarcacion();
		} catch (Exception e) {
			listaTipoMarcacion = null;
			e.printStackTrace();
		}
		return listaTipoMarcacion;
	}

	public void setListaTipoMarcacion(List<RhtbcTipomarcacion> listaTipoMarcacion) {
		this.listaTipoMarcacion = listaTipoMarcacion;
	}

	public List<VstMarcacionrrhh> getListaMarcaciones() {
		return listaMarcaciones;
	}

	public void setListaMarcaciones(List<VstMarcacionrrhh> listaMarcaciones) {
		this.listaMarcaciones = listaMarcaciones;
	}

	public Date getfMarcacionI() {
		return fMarcacionI;
	}

	public void setfMarcacionI(Date fMarcacionI) {
		this.fMarcacionI = fMarcacionI;
	}

	public Date getfMarcacionF() {
		return fMarcacionF;
	}

	public void setfMarcacionF(Date fMarcacionF) {
		this.fMarcacionF = fMarcacionF;
	}

	public List<SitbTdocide> getListaTipoDoc() {
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			listaTipoDoc = personalDespatch.getTipoDocRemitente();
		} catch (Exception e) {
			listaTipoDoc = null;
			e.printStackTrace();
		}
		return listaTipoDoc;
	}

	public void setListaTipoDoc(List<SitbTdocide> listaTipoDoc) {
		this.listaTipoDoc = listaTipoDoc;
	}

	public VstPersonalrrhh getFiltro() {
		return filtro;
	}

	public void setFiltro(VstPersonalrrhh filtro) {
		this.filtro = filtro;
	}

	public String getTxt1() {
		return txt1;
	}

	public void setTxt1(String txt1) {
		this.txt1 = txt1;
	}

	public List<TdtbcDependencia> getDependenciasAutocomplete() {
		return dependenciasAutocomplete;
	}

	public void setDependenciasAutocomplete(
			List<TdtbcDependencia> dependenciasAutocomplete) {
		this.dependenciasAutocomplete = dependenciasAutocomplete;
	}

	public TdtbcDependencia getDependenciaSeleccionada() {
		return dependenciaSeleccionada;
	}

	public void setDependenciaSeleccionada(TdtbcDependencia dependenciaSeleccionada) {
		this.dependenciaSeleccionada = dependenciaSeleccionada;
	}

	public String getSelectedIntendencia() {
		return selectedIntendencia;
	}

	public void setSelectedIntendencia(String selectedIntendencia) {
		this.selectedIntendencia = selectedIntendencia;
	}

	public List<TdtbcIntendencia> getListaIntendencia() {
		PersonalDespatch personalDespatch = new PersonalDespatch();
		try {
			listaIntendencia=personalDespatch.getIntendencia(PGP_Usuario.getN_numint());
		} catch (Exception e) {
			listaIntendencia=null;
			e.printStackTrace();
		}
		return listaIntendencia;
	}

	public void setListaIntendencia(List<TdtbcIntendencia> listaIntendencia) {
		this.listaIntendencia = listaIntendencia;
	}

	public Date getfCargaI() {
		return fCargaI;
	}

	public void setfCargaI(Date fCargaI) {
		this.fCargaI = fCargaI;
	}

	public Date getfCargaF() {
		return fCargaF;
	}

	public void setfCargaF(Date fCargaF) {
		this.fCargaF = fCargaF;
	}

	public Boolean getUploadedTxt() {
		return uploadedTxt;
	}

	public void setUploadedTxt(Boolean uploadedTxt) {
		this.uploadedTxt = uploadedTxt;
	}

	public Boolean getConvertedTxt() {
		return convertedTxt;
	}

	public void setConvertedTxt(Boolean convertedTxt) {
		this.convertedTxt = convertedTxt;
	}	
	
	public UploadedFile getFileTxt() {
		return fileTxt;
	}

	public void setFileTxt(UploadedFile fileTxt) {
		this.fileTxt = fileTxt;
	}	

	@ManagedProperty("#{loginBean.PGP_Usuario}")
	private Usuario  PGP_Usuario;
	
	/**
	 * Constructor
	 */
	public MarcacionBean() {
		
	}		

	public Usuario getPGP_Usuario() {
		return PGP_Usuario;
	}

	public void setPGP_Usuario(Usuario pGP_Usuario) {
		PGP_Usuario = pGP_Usuario;
	}	
    
    public StreamedContent getFileDownloadTxt() {
    	exportTxt();
        return fileDownloadTxt;
    }        
    
    public void resetTxt()
    {
    	setUploadedTxt(false);
    	setConvertedTxt(false);
    }        
    
    public void convertTxt()
    {
    	System.out.println("begin validator");
        tramaConverterTxt converter = new tramaConverterTxt();
        try {
        	tramaConverterTxt.setCurDate(personalDespatch.currentDate());
        	tramaConverterTxt.setInitDate(fCargaI);
        	tramaConverterTxt.setEndDate(fCargaF);
			System.out.println("fecha actual para conversor ::: "+tramaConverterTxt.getCurDate());
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();			
			tramaConverterTxt.setCurDate(new Date().toLocaleString());
		}
        converter.Process();
        //System.out.println(validator.getErrorLog());
        mostrarMensajeInfo("El proceso de carga fue ejecutado.");
        //FacesMessage message = new FacesMessage("", "Archivo convertido a EXCEL satisfactoriamente.");
        //FacesContext.getCurrentInstance().addMessage(null, message);        
        System.out.println("end validator");
        setConvertedTxt(true);
    }        
    
    public void exportTxt()
    {
    	//InputStream stream = ((ServletContext)FacesContext.getCurrentInstance().getExternalContext().getContext()).getResourceAsStream("/resources/txt/temporal_TramaBN_libros.txt");
    	InputStream stream;
		try {
			String rutaXls=Funciones.ObtProp_Resources("ruta.xls");
			stream = new FileInputStream(rutaXls+"/workbookOut.xlsx");
			//stream = new FileInputStream("D://Willy//fileconverter//code//EPS Exclusions//RewriteBN//workbookOut.xlsx");
			fileDownloadTxt = new DefaultStreamedContent(stream, "application/vnd.ms-excel", "xls_bn"+personalDespatch.currentDate().replace("/", "-")+".xlsx");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}       
    }
    
    
    
    public void uploadTxt() {    
    	if(fCargaI!=null){}
    	else
    	{
    		mostrarMensajeError("Ingrese Fecha de inicio");
    	}
    	if(fCargaF!=null){}
    	else
    	{
    		mostrarMensajeError("Ingrese Fecha de fin");
    	}
    	if(fCargaI.after(fCargaF))
    	{
    		mostrarMensajeError("La fecha de inicio debe ser menor o igual a la fecha de fin");
    	}
        if(fileTxt != null) {        	
        	//if(!fileTxt.getFileName().toUpperCase().contains(".TXT") && !fileTxt.getFileName().toUpperCase().contains(".PAGOS"))
        	if(!fileTxt.getFileName().toUpperCase().contains(".DAT"))
        	{
        		mostrarMensajeError("Debe seleccionar un archivo texto con extensión DAT.");
        		//FacesMessage message = new FacesMessage("", "Debe seleccionar un archivo texto con extensión DAT.");
	            //FacesContext.getCurrentInstance().addMessage(null, message);
	            return;
        	}        	
        	
        	System.out.println("begin upload");
            //FacesMessage message = new FacesMessage("", fileTxt.getFileName() + " fue subido.");
            //String messageString=fileTxt.getFileName() + " fue subido.";
            //FacesContext.getCurrentInstance().addMessage(null, message);
            InputStream in;
			try {
				in = fileTxt.getInputstream();
				String rutaXls=Funciones.ObtProp_Resources("ruta.xls");
				File file = new File(rutaXls+"/temporal.txt");
				//File file = new File("D://Willy//fileconverter//code//EPS Exclusions//RewriteBN//temporal.txt");
				OutputStream out = new FileOutputStream(file);
		        byte[] buf = new byte[1024];
		        int len;
		        while((len=in.read(buf))>0){
		            out.write(buf,0,len);
		        }
		        out.close();
		        in.close();
		        System.out.println("end upload");
		        
		        System.out.println("begin validator");
		        tramaValidatorTxt validator = new tramaValidatorTxt();        
		        tramaValidatorTxt.setInitDate(fCargaI);
		        tramaValidatorTxt.setEndDate(fCargaF);
		        validator.Process();
		        System.out.println(validator.getErrorLog());
		        if(tramaValidatorTxt.isHayError())
		        {
		        	//message = new FacesMessage("", validator.getErrorLog());		        	
			        //FacesContext.getCurrentInstance().addMessage(null, message);
			        mostrarMensajeError(validator.getErrorLog());
			        setUploadedTxt(false);
		        }
		        else
		        {
		        	//message = new FacesMessage("", this.fileTxt.getFileName() + " fue subido y validado de manera satisfactoria. Usted ya puede generar el archivo EXCEL.");
		        	//FacesContext.getCurrentInstance().addMessage(null, message);
		        	mostrarMensajeInfo(this.fileTxt.getFileName() + " fue subido y validado de manera satisfactoria. Usted ya puede Cargar la Data.");
		        	setUploadedTxt(true);
		        }
		        validator.resetErrorLog();//resetea la cadena log de errores y flag hayError
		        System.out.println("end validator");		        
		        
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				mostrarMensajeError(fileTxt.getFileName() + " no fue subido, contactar con el administrador.");
				//message = new FacesMessage("", fileTxt.getFileName() + " no fue subido, contactar con el administrador.");
	            //FacesContext.getCurrentInstance().addMessage(null, message);
			}
            
            
            
        }
        else
        {
        	mostrarMensajeError("Seleccione un archivo.");
        	//FacesMessage message = new FacesMessage("", "Seleccione un archivo.");
            //FacesContext.getCurrentInstance().addMessage(null, message);
        }
    }
            
    public String verMarcacion(){
    	resetTxt();
		String vista="pretty:marcacionPretty";
        //CODIGO
        return  vista;
	}     
    
    public void itemChangeIntendencia()
	{
		if(selectedIntendencia == null || "".equals(selectedIntendencia.trim()))
		{
			txt1 = "";
			dependenciaSeleccionada = null;
		}
	}
    
    public List<String> completeText(String query) {
		PersonalDespatch personalDespatch = new PersonalDespatch();
		dependenciasAutocomplete = new ArrayList<TdtbcDependencia>();
		try {
			dependenciasAutocomplete = personalDespatch
					.getAutocompletarDependenciaEIntendencia(query,
							selectedIntendencia);
							//PGP_Usuario.getN_numint());
		} catch (Exception e) {
			e.printStackTrace();
		}

		List<String> results = new ArrayList<String>();

		for (Iterator iterator = dependenciasAutocomplete.iterator(); iterator
				.hasNext();) {
			TdtbcDependencia tdtbcDependencia = (TdtbcDependencia) iterator
					.next();
			results.add(tdtbcDependencia.getvDesdep());
		}
		return results;
	}
    
    public List<String> completePersonal(String query) {
		PersonalDespatch personalDespatch = new PersonalDespatch();
		personalAutocomplete = new ArrayList<PrtbcPersonal>();
		try {
			personalAutocomplete = (ArrayList<PrtbcPersonal>) personalDespatch.getAutoCompletarPersonal(query);
							//PGP_Usuario.getN_numint());
		} catch (Exception e) {
			e.printStackTrace();
		}

		List<String> results = new ArrayList<String>();

		for (Iterator iterator = personalAutocomplete.iterator(); iterator.hasNext();) {
			PrtbcPersonal personal = (PrtbcPersonal) iterator.next();
			results.add(personal.getvDesnombres()+" "+personal.getvDesapepat()+" "+personal.getvDesapemat());
		}
		return results;
	}
    
    public void onItemSelect(SelectEvent event) {
		for (Iterator iterator = dependenciasAutocomplete.iterator(); iterator
				.hasNext();) {
			TdtbcDependencia tdtbcDependencia = (TdtbcDependencia) iterator
					.next();
			if (event.getObject().toString()
					.equals(tdtbcDependencia.getvDesdep())) {
				dependenciaSeleccionada = tdtbcDependencia;
				filtro.setnNumdep(dependenciaSeleccionada.getnNumdep());
			}
		}
	}
    
    public void onItemSelectPersona(SelectEvent event) {
		for (Iterator iterator = personalAutocomplete.iterator(); iterator.hasNext();) {
			PrtbcPersonal persona = (PrtbcPersonal) iterator.next();
			if (event.getObject().toString().equals(persona.getvDesnombres()+" "+persona.getvDesapepat()+" "+persona.getvDesapemat())) {
				personalSeleccionado = persona;
				//filtro.setnNumdep(dependenciaSeleccionada.getnNumdep());
			}
		}
	}
    
    public void insertarJustificacionDia(){
    	Short hora=8,minuto=30,segundo=0,tipo=1;
    	justificacion.setvCodpersonal(personalSeleccionado.getvCodpersonal());
    	justificacion.setnCodorigen(new Short("2"));//Justificacion
    	justificacion.setdFecha(fecha);
    	justificacion.setnSegundo(segundo);
    	justificacion.setnHora(hora);
    	justificacion.setnMinuto(minuto);
    	justificacion.setnCodtipo(tipo);
    	justificar(false);
    	hora=18;tipo=2;
    	justificacion.setnCodtipo(tipo);
    	justificacion.setnHora(hora);
    	justificar(false);
    	RequestContext.getCurrentInstance().execute("formDialogWidgetAgregar.hide()");
		mostrarMensajeInfo("Justificación de dia guardada.");
		personal="";
		//justificacion=null;
    }
    
    public String verJustificacion(){
    	limpiar();
		String vista="pretty:personalMarcacionPretty";
        //CODIGO
        return  vista;
	}
    
    public boolean validaBuscarMarcacion()
    {
    	if (((filtro.getvCodtipodocid() == null || "".equals(filtro.getvCodtipodocid().trim())) && (filtro.getvCodpersonal()==null || "".equals(filtro.getvCodpersonal().trim())))
				&& (selectedIntendencia == null || "".equals(selectedIntendencia.trim()))
				&& (filtro.getnNumdep() == null)
				&& (fMarcacionI == null || fMarcacionF == null)
				&& (filtro.getvCodtipo()==null)) {
    		listaMarcaciones = null;
			mostrarMensajeError("Debe ingresar o seleccionar al menos un criterio de búsqueda.");
			return false;
		}
    	if(fMarcacionI != null){}
    	else
    	{
    		mostrarMensajeError("Debe ingresar fecha de inicio.");
    		return false;
    	}
    	if(fMarcacionF != null){}
    	else
    	{
    		mostrarMensajeError("Debe ingresar fecha de fin.");
    		return false;
    	}
    	if(fMarcacionI!=null && fMarcacionF!=null)
    	{
    		if(fMarcacionI.after(fMarcacionF))
    		{
    			mostrarMensajeError("La fecha de inicio debe ser menor o igual que la fecha de fin.");
        		return false;
    		}
    	}
    	if(fMarcacionI.after(new Date()))
    	{
    		mostrarMensajeError("No puede ingresar Fechas Futuras.");
    		return false;
    	}
    	if(fMarcacionF.after(new Date()))
    	{
    		mostrarMensajeError("No puede ingresar Fechas Futuras.");
    		return false;
    	}
    	if(filtro.getvCodtipodocid()!=null && !"".equals(filtro.getvCodtipodocid().trim()))
		{
			if("03".equals(filtro.getvCodtipodocid().trim()))
			{
				if(filtro.getvCodpersonal()!=null && !"".equals(filtro.getvCodpersonal().trim()))
				{
					if(filtro.getvCodpersonal().trim().length()!=8)
					{
						mostrarMensajeError("Debe ingresar un número de DNI de 8 dígitos.");						
						return false;
					}
				}
				else
				{
					mostrarMensajeError("Debe ingresar un número de DNI de 8 dígitos.");					
					return false;
				}
			}
			else if("06".equals(filtro.getvCodtipodocid().trim()) || "08".equals(filtro.getvCodtipodocid().trim()))
			{
				if(filtro.getvCodpersonal()!=null && !"".equals(filtro.getvCodpersonal().trim())){}
				else
				{
					mostrarMensajeError("Debe ingresar un nro de documento.");					
					return false;
				}
			}
		}
    	if(filtro.getvCodpersonal()!=null && !"".equals(filtro.getvCodpersonal().trim()))
		{
			if(filtro.getvCodtipodocid()!=null && !"".equals(filtro.getvCodtipodocid().trim())){}
			else
			{
				mostrarMensajeError("Debe seleccionar un tipo de documento.");				
				return false;
			}
		}
    	return true;
    }
    
    public void buscarMarcacion()
    {
    	if (txt1 != null && !"".equals(txt1)) {
		} else {
			filtro.setnNumdep(null);
		}
    	if(!validaBuscarMarcacion()){}
    	else
    	{
    		MarcacionDespatch marcacionDespatch = new MarcacionDespatch();
    		try {			
    			if(selectedIntendencia != null && !"".equals(selectedIntendencia.trim()))
    			{
    				filtro.setnNumint(new BigDecimal(selectedIntendencia));
    			}
    			listaMarcaciones = marcacionDespatch.getMarcaciones(filtro, fMarcacionI, fMarcacionF);
    		} catch (Exception e) {
    			listaMarcaciones = null;
    			e.printStackTrace();
    		}
    	}
    }
    
    public void limpiar()
    {
    	fMarcacionI=new Date();
    	fMarcacionF=new Date();
    	selectedIntendencia="";
		txt1 = "";
		dependenciaSeleccionada = null;
    	filtro=new VstPersonalrrhh();    
    	listaMarcaciones=null;
    }
    
    public void selectEditar(VstMarcacionrrhh item)
    {
    	justificacion.setvCodpersonal(item.getvCodpersonal());
    	justificacion.setnCodorigen(new Short("2"));//Justificacion
    	justificacion.setnCodtipo(item.getnCodtipo());
    	justificacion.setdFecha(item.getdFecha());    	
    	justificacion.setnHora(item.getnHora());
    	justificacion.setnMinuto(item.getnMinuto());
    	justificacion.setnSegundo(item.getnSegundo());
    	justificacion.setnCodtipjus(null);
    	justificacion.setvMotjus("");
    	RequestContext.getCurrentInstance().execute("dialogWidgetDetalleE.show()");
    }
    
    public void selectVer(VstMarcacionrrhh item)
    {    	
    	justificacionVer=item;
    	RequestContext.getCurrentInstance().execute("dialogWidgetDetalleV.show()");
    }
    
    public boolean validaJustificar()
    {
    	if(justificacion.getnCodtipo()!=null){}
    	else
    	{
    		mostrarMensajeError("Debe seleccionar un tipo.");
    		return false;
    	}
    	if(justificacion.getdFecha()!=null){}
    	else
    	{
    		mostrarMensajeError("Debe ingresar una fecha.");
    		return false;
    	}
    	if(justificacion.getnHora()!=null)
    	{
    		if(justificacion.getnHora()>=0 && justificacion.getnHora()<=23){}
    		else
    		{
    			mostrarMensajeError("Debe ingresar hora [0-23].");
        		return false;
    		}
    	}
    	else
    	{
    		mostrarMensajeError("Debe ingresar hora [0-23].");
    		return false;
    	}
    	if(justificacion.getnMinuto()!=null)
    	{
    		if(justificacion.getnMinuto()>=0 && justificacion.getnMinuto()<=59){}
    		else
    		{
    			mostrarMensajeError("Debe ingresar minuto [0-59].");
        		return false;
    		}
    	}
    	else
    	{
    		mostrarMensajeError("Debe ingresar minuto [0-59].");
    		return false;
    	}
    	if(justificacion.getnCodtipjus()!=null){}
    	else
    	{
    		mostrarMensajeError("Debe seleccionar un tipo de justificación.");
    		return false;
    	}
    	if(justificacion.getvMotjus() != null || !"".equals(justificacion.getvMotjus().trim())){}
    	else
    	{
    		mostrarMensajeError("Debe ingresar un motivo.");
    		return false;
    	}
    	return true;
    }
    
    public void justificar(boolean opcion)
    {
    	if(!validaJustificar()){}
    	else
    	{
    		try {
        		MarcacionDespatch marcacionDespatch = new MarcacionDespatch();
        		justificacion.setnCodmarcacion(new BigDecimal(getSiguienteCorrelativoGlobalMarcacion()));    	
        		justificacion.setvMotjus(justificacion.getvMotjus().toUpperCase());
    			marcacionDespatch.insertarMarcacion(justificacion);	    					    			
    		} catch (Exception e) {		    			
    			e.printStackTrace();
    		}
        	buscarMarcacion();
        	if(opcion){//cuando se esta justificando una marcacion tardia
        	RequestContext.getCurrentInstance().execute("dialogWidgetDetalleE.hide()");
    		mostrarMensajeInfo("Justificación guardada.");
    		}
    	}    		
    }
    
    public String getSiguienteCorrelativoGlobalMarcacion()
	{
		MarcacionDespatch marcacionDespatch = new MarcacionDespatch();
		try {
			RhmvcMarcacion correlativo=marcacionDespatch.getCorrelativoGlobalMarcacion();
			if(correlativo!=null)
			{
				return ""+(Long.parseLong(""+correlativo.getnCodmarcacion())+1);
			}
			else
			{
				//devuelve correlativo en 1				
				return "1";
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}				
	}
    
    public void dialogReferenciaEliminar(VstMarcacionrrhh item)
    {
    	justificacionEliminar=new RhmvcMarcacion();
    	justificacionEliminar.setnCodmarcacion(item.getnCodmarcacion());
    	justificacionEliminar.setdFecha(item.getdFecha());
    	RequestContext.getCurrentInstance().execute("dialogWidget3.show()");    	
    }
    
    public void eliminarJustificacion()
    {		
		MarcacionDespatch marcacionDespatch = new MarcacionDespatch();
		try {					
			//eliminar detalle	
			marcacionDespatch.eliminarJustificacion(justificacionEliminar);
			//post load
			buscarMarcacion();
			mostrarMensajeInfo("Justificación fue eliminada.");			
		} catch (Exception e) {
			buscarMarcacion();
			mostrarMensajeError("Hubo problemas con la eliminación.");			
		}
    }
    
    public void desplegarOpcionAgregar(){
    	justificacion=new RhmvcMarcacion();
    	justificacion.setvMotjus("");
    	RequestContext.getCurrentInstance().execute("formDialogWidgetAgregar.show()");
    }
    public String completarDosDigitos(Short base)
    {
    	return completarCon(""+base,2,"0",0);
    }
    
    public String completarCon(String base, int longitud,String charCompletar, int lado)
	{
		String result="";
		if(base.length()<longitud)
		{
			int n=longitud-base.length();
			String ceros="";
			for (int i = 0; i < n; i++) {
				ceros+=charCompletar;
			}
			if(lado==0)//izq
			{
				result = ceros+base;
			}
			else if(lado==1)//der
			{
				result = base+ceros;
			}
		}
		else if(base.length()>longitud)
		{
			result = base.substring(0, longitud);
		}
		else if(base.length()==longitud)
		{
			result=base;
		}
		return result;
	}
    
    public String getFormatDate(Date date) {
		if(date!=null)
		{
			return new SimpleDateFormat("dd/MM/yyyy").format(date);
		}
		else
		{
			return "";
		}
	}
    
    public void mostrarMensajeInfo(String msg)
	{		
		FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, msg, msg));
	}
	
	public void mostrarMensajeError(String msg)
	{
		FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, msg, msg));
	}

	public String getPersonal() {
		return personal;
	}

	public void setPersonal(String personal) {
		this.personal = personal;
	}

	public PrtbcPersonal getPersonalSeleccionado() {
		return personalSeleccionado;
	}

	public void setPersonalSeleccionado(PrtbcPersonal personalSeleccionado) {
		this.personalSeleccionado = personalSeleccionado;
	}

}
