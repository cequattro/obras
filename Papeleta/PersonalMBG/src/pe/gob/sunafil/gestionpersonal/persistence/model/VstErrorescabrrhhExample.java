package pe.gob.sunafil.gestionpersonal.persistence.model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class VstErrorescabrrhhExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated Thu Mar 30 08:50:03 COT 2017
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated Thu Mar 30 08:50:03 COT 2017
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated Thu Mar 30 08:50:03 COT 2017
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated Thu Mar 30 08:50:03 COT 2017
     */
    public VstErrorescabrrhhExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated Thu Mar 30 08:50:03 COT 2017
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated Thu Mar 30 08:50:03 COT 2017
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated Thu Mar 30 08:50:03 COT 2017
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated Thu Mar 30 08:50:03 COT 2017
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated Thu Mar 30 08:50:03 COT 2017
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated Thu Mar 30 08:50:03 COT 2017
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated Thu Mar 30 08:50:03 COT 2017
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated Thu Mar 30 08:50:03 COT 2017
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated Thu Mar 30 08:50:03 COT 2017
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated Thu Mar 30 08:50:03 COT 2017
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated Thu Mar 30 08:50:03 COT 2017
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andNGrupocargaIsNull() {
            addCriterion("N_GRUPOCARGA is null");
            return (Criteria) this;
        }

        public Criteria andNGrupocargaIsNotNull() {
            addCriterion("N_GRUPOCARGA is not null");
            return (Criteria) this;
        }

        public Criteria andNGrupocargaEqualTo(BigDecimal value) {
            addCriterion("N_GRUPOCARGA =", value, "nGrupocarga");
            return (Criteria) this;
        }

        public Criteria andNGrupocargaNotEqualTo(BigDecimal value) {
            addCriterion("N_GRUPOCARGA <>", value, "nGrupocarga");
            return (Criteria) this;
        }

        public Criteria andNGrupocargaGreaterThan(BigDecimal value) {
            addCriterion("N_GRUPOCARGA >", value, "nGrupocarga");
            return (Criteria) this;
        }

        public Criteria andNGrupocargaGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("N_GRUPOCARGA >=", value, "nGrupocarga");
            return (Criteria) this;
        }

        public Criteria andNGrupocargaLessThan(BigDecimal value) {
            addCriterion("N_GRUPOCARGA <", value, "nGrupocarga");
            return (Criteria) this;
        }

        public Criteria andNGrupocargaLessThanOrEqualTo(BigDecimal value) {
            addCriterion("N_GRUPOCARGA <=", value, "nGrupocarga");
            return (Criteria) this;
        }

        public Criteria andNGrupocargaIn(List<BigDecimal> values) {
            addCriterion("N_GRUPOCARGA in", values, "nGrupocarga");
            return (Criteria) this;
        }

        public Criteria andNGrupocargaNotIn(List<BigDecimal> values) {
            addCriterion("N_GRUPOCARGA not in", values, "nGrupocarga");
            return (Criteria) this;
        }

        public Criteria andNGrupocargaBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("N_GRUPOCARGA between", value1, value2, "nGrupocarga");
            return (Criteria) this;
        }

        public Criteria andNGrupocargaNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("N_GRUPOCARGA not between", value1, value2, "nGrupocarga");
            return (Criteria) this;
        }

        public Criteria andDFecregIsNull() {
            addCriterion("D_FECREG is null");
            return (Criteria) this;
        }

        public Criteria andDFecregIsNotNull() {
            addCriterion("D_FECREG is not null");
            return (Criteria) this;
        }

        public Criteria andDFecregEqualTo(String value) {
            addCriterion("D_FECREG =", value, "dFecreg");
            return (Criteria) this;
        }

        public Criteria andDFecregNotEqualTo(String value) {
            addCriterion("D_FECREG <>", value, "dFecreg");
            return (Criteria) this;
        }

        public Criteria andDFecregGreaterThan(String value) {
            addCriterion("D_FECREG >", value, "dFecreg");
            return (Criteria) this;
        }

        public Criteria andDFecregGreaterThanOrEqualTo(String value) {
            addCriterion("D_FECREG >=", value, "dFecreg");
            return (Criteria) this;
        }

        public Criteria andDFecregLessThan(String value) {
            addCriterion("D_FECREG <", value, "dFecreg");
            return (Criteria) this;
        }

        public Criteria andDFecregLessThanOrEqualTo(String value) {
            addCriterion("D_FECREG <=", value, "dFecreg");
            return (Criteria) this;
        }

        public Criteria andDFecregLike(String value) {
            addCriterion("D_FECREG like", value, "dFecreg");
            return (Criteria) this;
        }

        public Criteria andDFecregNotLike(String value) {
            addCriterion("D_FECREG not like", value, "dFecreg");
            return (Criteria) this;
        }

        public Criteria andDFecregIn(List<String> values) {
            addCriterion("D_FECREG in", values, "dFecreg");
            return (Criteria) this;
        }

        public Criteria andDFecregNotIn(List<String> values) {
            addCriterion("D_FECREG not in", values, "dFecreg");
            return (Criteria) this;
        }

        public Criteria andDFecregBetween(String value1, String value2) {
            addCriterion("D_FECREG between", value1, value2, "dFecreg");
            return (Criteria) this;
        }

        public Criteria andDFecregNotBetween(String value1, String value2) {
            addCriterion("D_FECREG not between", value1, value2, "dFecreg");
            return (Criteria) this;
        }

        public Criteria andDFecregoIsNull() {
            addCriterion("D_FECREGO is null");
            return (Criteria) this;
        }

        public Criteria andDFecregoIsNotNull() {
            addCriterion("D_FECREGO is not null");
            return (Criteria) this;
        }

        public Criteria andDFecregoEqualTo(Date value) {
            addCriterionForJDBCDate("D_FECREGO =", value, "dFecrego");
            return (Criteria) this;
        }

        public Criteria andDFecregoNotEqualTo(Date value) {
            addCriterionForJDBCDate("D_FECREGO <>", value, "dFecrego");
            return (Criteria) this;
        }

        public Criteria andDFecregoGreaterThan(Date value) {
            addCriterionForJDBCDate("D_FECREGO >", value, "dFecrego");
            return (Criteria) this;
        }

        public Criteria andDFecregoGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("D_FECREGO >=", value, "dFecrego");
            return (Criteria) this;
        }

        public Criteria andDFecregoLessThan(Date value) {
            addCriterionForJDBCDate("D_FECREGO <", value, "dFecrego");
            return (Criteria) this;
        }

        public Criteria andDFecregoLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("D_FECREGO <=", value, "dFecrego");
            return (Criteria) this;
        }

        public Criteria andDFecregoIn(List<Date> values) {
            addCriterionForJDBCDate("D_FECREGO in", values, "dFecrego");
            return (Criteria) this;
        }

        public Criteria andDFecregoNotIn(List<Date> values) {
            addCriterionForJDBCDate("D_FECREGO not in", values, "dFecrego");
            return (Criteria) this;
        }

        public Criteria andDFecregoBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("D_FECREGO between", value1, value2, "dFecrego");
            return (Criteria) this;
        }

        public Criteria andDFecregoNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("D_FECREGO not between", value1, value2, "dFecrego");
            return (Criteria) this;
        }

        public Criteria andVCodusuregIsNull() {
            addCriterion("V_CODUSUREG is null");
            return (Criteria) this;
        }

        public Criteria andVCodusuregIsNotNull() {
            addCriterion("V_CODUSUREG is not null");
            return (Criteria) this;
        }

        public Criteria andVCodusuregEqualTo(String value) {
            addCriterion("V_CODUSUREG =", value, "vCodusureg");
            return (Criteria) this;
        }

        public Criteria andVCodusuregNotEqualTo(String value) {
            addCriterion("V_CODUSUREG <>", value, "vCodusureg");
            return (Criteria) this;
        }

        public Criteria andVCodusuregGreaterThan(String value) {
            addCriterion("V_CODUSUREG >", value, "vCodusureg");
            return (Criteria) this;
        }

        public Criteria andVCodusuregGreaterThanOrEqualTo(String value) {
            addCriterion("V_CODUSUREG >=", value, "vCodusureg");
            return (Criteria) this;
        }

        public Criteria andVCodusuregLessThan(String value) {
            addCriterion("V_CODUSUREG <", value, "vCodusureg");
            return (Criteria) this;
        }

        public Criteria andVCodusuregLessThanOrEqualTo(String value) {
            addCriterion("V_CODUSUREG <=", value, "vCodusureg");
            return (Criteria) this;
        }

        public Criteria andVCodusuregLike(String value) {
            addCriterion("V_CODUSUREG like", value, "vCodusureg");
            return (Criteria) this;
        }

        public Criteria andVCodusuregNotLike(String value) {
            addCriterion("V_CODUSUREG not like", value, "vCodusureg");
            return (Criteria) this;
        }

        public Criteria andVCodusuregIn(List<String> values) {
            addCriterion("V_CODUSUREG in", values, "vCodusureg");
            return (Criteria) this;
        }

        public Criteria andVCodusuregNotIn(List<String> values) {
            addCriterion("V_CODUSUREG not in", values, "vCodusureg");
            return (Criteria) this;
        }

        public Criteria andVCodusuregBetween(String value1, String value2) {
            addCriterion("V_CODUSUREG between", value1, value2, "vCodusureg");
            return (Criteria) this;
        }

        public Criteria andVCodusuregNotBetween(String value1, String value2) {
            addCriterion("V_CODUSUREG not between", value1, value2, "vCodusureg");
            return (Criteria) this;
        }

        public Criteria andTotalIsNull() {
            addCriterion("TOTAL is null");
            return (Criteria) this;
        }

        public Criteria andTotalIsNotNull() {
            addCriterion("TOTAL is not null");
            return (Criteria) this;
        }

        public Criteria andTotalEqualTo(BigDecimal value) {
            addCriterion("TOTAL =", value, "total");
            return (Criteria) this;
        }

        public Criteria andTotalNotEqualTo(BigDecimal value) {
            addCriterion("TOTAL <>", value, "total");
            return (Criteria) this;
        }

        public Criteria andTotalGreaterThan(BigDecimal value) {
            addCriterion("TOTAL >", value, "total");
            return (Criteria) this;
        }

        public Criteria andTotalGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("TOTAL >=", value, "total");
            return (Criteria) this;
        }

        public Criteria andTotalLessThan(BigDecimal value) {
            addCriterion("TOTAL <", value, "total");
            return (Criteria) this;
        }

        public Criteria andTotalLessThanOrEqualTo(BigDecimal value) {
            addCriterion("TOTAL <=", value, "total");
            return (Criteria) this;
        }

        public Criteria andTotalIn(List<BigDecimal> values) {
            addCriterion("TOTAL in", values, "total");
            return (Criteria) this;
        }

        public Criteria andTotalNotIn(List<BigDecimal> values) {
            addCriterion("TOTAL not in", values, "total");
            return (Criteria) this;
        }

        public Criteria andTotalBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("TOTAL between", value1, value2, "total");
            return (Criteria) this;
        }

        public Criteria andTotalNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("TOTAL not between", value1, value2, "total");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated do_not_delete_during_merge Thu Mar 30 08:50:03 COT 2017
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table RRHHSYS.VST_ERRORESCABRRHH
     *
     * @mbggenerated Thu Mar 30 08:50:03 COT 2017
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}