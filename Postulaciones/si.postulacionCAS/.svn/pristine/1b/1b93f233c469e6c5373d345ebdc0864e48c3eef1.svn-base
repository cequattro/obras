package pe.gob.sunafil.postulacioncas.mybatis.implementacion;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.log4j.Logger;

import pe.gob.sunafil.postulacioncas.bean.Reclamo;
import pe.gob.sunafil.postulacioncas.mybatis.comun.MyBatisConnectionFactory;
import pe.gob.sunafil.postulacioncas.mybatis.interfase.INTPostulacion1;
import pe.gob.sunafil.postulacioncas.mybatis.interfase.INTReporte;
import pe.gob.sunafil.postulacioncas.persistence.client.RhtbcConvocatoriaMapper;
import pe.gob.sunafil.postulacioncas.persistence.model.RhtbcConvocatoria;
import pe.gob.sunafil.postulacioncas.persistence.model.RhtbcConvocatoriaExample;

public class IMPPostulacion1 implements INTPostulacion1{
	
	private static Logger logger = Logger.getLogger(IMPPostulacion1.class.getName());
	
	private SqlSessionFactory sqlSessionFactory;
	
	public IMPPostulacion1(){
		sqlSessionFactory=MyBatisConnectionFactory.getSqlSessionFactory();
	}
	
	@Override
	public String obtieneNombreConvocatoria(String n_corconv) throws Exception {
		SqlSession sqlSession = sqlSessionFactory.openSession();
		RhtbcConvocatoriaExample example = new RhtbcConvocatoriaExample();
		example.createCriteria().andNCorconvEqualTo(new BigDecimal(n_corconv));
		RhtbcConvocatoriaMapper mapper = sqlSession.getMapper(RhtbcConvocatoriaMapper.class);
		try {
			List <RhtbcConvocatoria> allRecords = mapper.selectByExample(example);
			if(allRecords == null ){
				return null;
			}else if (allRecords.size() == 0){
				return null;
			}else{
				return allRecords.get(0).getvPuesto();
			}
			
		} catch (Exception e) {
			logger.error("Error actualizarRegistroEntradaSIIT "+e.getMessage(),e);   
        	return null;
		} finally{
			sqlSession.close();			
		}
		
	}
}
